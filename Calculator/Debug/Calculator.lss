
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000279c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000279c  00002830  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800068  00800068  00002838  2**0
                  ALLOC
  3 .stab         00001b24  00000000  00000000  00002838  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c51  00000000  00000000  0000435c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000050ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000525d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006ea6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007d91  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00008b40  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000096fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 37       	cpi	r26, 0x7A	; 122
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e9       	ldi	r30, 0x9C	; 156
      78:	f7 e2       	ldi	r31, 0x27	; 39
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <main>
      8a:	0c 94 cc 13 	jmp	0x2798	; 0x2798 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 50 13 	jmp	0x26a0	; 0x26a0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6c 13 	jmp	0x26d8	; 0x26d8 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 60 13 	jmp	0x26c0	; 0x26c0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <mult>:
uint32 operand[2];
uint32 lastNum=0;


void mult(uint32 x, uint32 y)
{
     b46:	af 92       	push	r10
     b48:	bf 92       	push	r11
     b4a:	cf 92       	push	r12
     b4c:	df 92       	push	r13
     b4e:	ef 92       	push	r14
     b50:	ff 92       	push	r15
     b52:	0f 93       	push	r16
     b54:	1f 93       	push	r17
     b56:	df 93       	push	r29
     b58:	cf 93       	push	r28
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
     b5e:	60 97       	sbiw	r28, 0x10	; 16
     b60:	0f b6       	in	r0, 0x3f	; 63
     b62:	f8 94       	cli
     b64:	de bf       	out	0x3e, r29	; 62
     b66:	0f be       	out	0x3f, r0	; 63
     b68:	cd bf       	out	0x3d, r28	; 61
     b6a:	69 87       	std	Y+9, r22	; 0x09
     b6c:	7a 87       	std	Y+10, r23	; 0x0a
     b6e:	8b 87       	std	Y+11, r24	; 0x0b
     b70:	9c 87       	std	Y+12, r25	; 0x0c
     b72:	2d 87       	std	Y+13, r18	; 0x0d
     b74:	3e 87       	std	Y+14, r19	; 0x0e
     b76:	4f 87       	std	Y+15, r20	; 0x0f
     b78:	58 8b       	std	Y+16, r21	; 0x10
	mul=0;
     b7a:	10 92 68 00 	sts	0x0068, r1
	uint64 result;
	result= x*y;
     b7e:	89 85       	ldd	r24, Y+9	; 0x09
     b80:	9a 85       	ldd	r25, Y+10	; 0x0a
     b82:	ab 85       	ldd	r26, Y+11	; 0x0b
     b84:	bc 85       	ldd	r27, Y+12	; 0x0c
     b86:	2d 85       	ldd	r18, Y+13	; 0x0d
     b88:	3e 85       	ldd	r19, Y+14	; 0x0e
     b8a:	4f 85       	ldd	r20, Y+15	; 0x0f
     b8c:	58 89       	ldd	r21, Y+16	; 0x10
     b8e:	bc 01       	movw	r22, r24
     b90:	cd 01       	movw	r24, r26
     b92:	0e 94 0f 13 	call	0x261e	; 0x261e <__mulsi3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	9c 01       	movw	r18, r24
     b9c:	ad 01       	movw	r20, r26
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	70 e0       	ldi	r23, 0x00	; 0
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	29 83       	std	Y+1, r18	; 0x01
     ba8:	3a 83       	std	Y+2, r19	; 0x02
     baa:	4b 83       	std	Y+3, r20	; 0x03
     bac:	5c 83       	std	Y+4, r21	; 0x04
     bae:	6d 83       	std	Y+5, r22	; 0x05
     bb0:	7e 83       	std	Y+6, r23	; 0x06
     bb2:	8f 83       	std	Y+7, r24	; 0x07
     bb4:	98 87       	std	Y+8, r25	; 0x08
	LCD_integerToString((unsigned long long) result);
     bb6:	a9 80       	ldd	r10, Y+1	; 0x01
     bb8:	ba 80       	ldd	r11, Y+2	; 0x02
     bba:	cb 80       	ldd	r12, Y+3	; 0x03
     bbc:	dc 80       	ldd	r13, Y+4	; 0x04
     bbe:	ed 80       	ldd	r14, Y+5	; 0x05
     bc0:	fe 80       	ldd	r15, Y+6	; 0x06
     bc2:	0f 81       	ldd	r16, Y+7	; 0x07
     bc4:	18 85       	ldd	r17, Y+8	; 0x08
     bc6:	2a 2d       	mov	r18, r10
     bc8:	3b 2d       	mov	r19, r11
     bca:	4c 2d       	mov	r20, r12
     bcc:	5d 2d       	mov	r21, r13
     bce:	6e 2d       	mov	r22, r14
     bd0:	7f 2d       	mov	r23, r15
     bd2:	80 2f       	mov	r24, r16
     bd4:	91 2f       	mov	r25, r17
     bd6:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_integerToString>
}
     bda:	60 96       	adiw	r28, 0x10	; 16
     bdc:	0f b6       	in	r0, 0x3f	; 63
     bde:	f8 94       	cli
     be0:	de bf       	out	0x3e, r29	; 62
     be2:	0f be       	out	0x3f, r0	; 63
     be4:	cd bf       	out	0x3d, r28	; 61
     be6:	cf 91       	pop	r28
     be8:	df 91       	pop	r29
     bea:	1f 91       	pop	r17
     bec:	0f 91       	pop	r16
     bee:	ff 90       	pop	r15
     bf0:	ef 90       	pop	r14
     bf2:	df 90       	pop	r13
     bf4:	cf 90       	pop	r12
     bf6:	bf 90       	pop	r11
     bf8:	af 90       	pop	r10
     bfa:	08 95       	ret

00000bfc <addition>:
void addition(uint32 x, uint32 y)
{
     bfc:	af 92       	push	r10
     bfe:	bf 92       	push	r11
     c00:	cf 92       	push	r12
     c02:	df 92       	push	r13
     c04:	ef 92       	push	r14
     c06:	ff 92       	push	r15
     c08:	0f 93       	push	r16
     c0a:	1f 93       	push	r17
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	28 97       	sbiw	r28, 0x08	; 8
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	69 83       	std	Y+1, r22	; 0x01
     c22:	7a 83       	std	Y+2, r23	; 0x02
     c24:	8b 83       	std	Y+3, r24	; 0x03
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	2d 83       	std	Y+5, r18	; 0x05
     c2a:	3e 83       	std	Y+6, r19	; 0x06
     c2c:	4f 83       	std	Y+7, r20	; 0x07
     c2e:	58 87       	std	Y+8, r21	; 0x08
	add=0;
     c30:	10 92 69 00 	sts	0x0069, r1
	LCD_integerToString(x+y);
     c34:	29 81       	ldd	r18, Y+1	; 0x01
     c36:	3a 81       	ldd	r19, Y+2	; 0x02
     c38:	4b 81       	ldd	r20, Y+3	; 0x03
     c3a:	5c 81       	ldd	r21, Y+4	; 0x04
     c3c:	8d 81       	ldd	r24, Y+5	; 0x05
     c3e:	9e 81       	ldd	r25, Y+6	; 0x06
     c40:	af 81       	ldd	r26, Y+7	; 0x07
     c42:	b8 85       	ldd	r27, Y+8	; 0x08
     c44:	82 0f       	add	r24, r18
     c46:	93 1f       	adc	r25, r19
     c48:	a4 1f       	adc	r26, r20
     c4a:	b5 1f       	adc	r27, r21
     c4c:	5c 01       	movw	r10, r24
     c4e:	6d 01       	movw	r12, r26
     c50:	ee 24       	eor	r14, r14
     c52:	ff 24       	eor	r15, r15
     c54:	87 01       	movw	r16, r14
     c56:	2a 2d       	mov	r18, r10
     c58:	3b 2d       	mov	r19, r11
     c5a:	4c 2d       	mov	r20, r12
     c5c:	5d 2d       	mov	r21, r13
     c5e:	6e 2d       	mov	r22, r14
     c60:	7f 2d       	mov	r23, r15
     c62:	80 2f       	mov	r24, r16
     c64:	91 2f       	mov	r25, r17
     c66:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_integerToString>
}
     c6a:	28 96       	adiw	r28, 0x08	; 8
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	cf 91       	pop	r28
     c78:	df 91       	pop	r29
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ff 90       	pop	r15
     c80:	ef 90       	pop	r14
     c82:	df 90       	pop	r13
     c84:	cf 90       	pop	r12
     c86:	bf 90       	pop	r11
     c88:	af 90       	pop	r10
     c8a:	08 95       	ret

00000c8c <subtraction>:
void subtraction(uint32 x, uint32 y)
{
     c8c:	af 92       	push	r10
     c8e:	bf 92       	push	r11
     c90:	cf 92       	push	r12
     c92:	df 92       	push	r13
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	df 93       	push	r29
     c9e:	cf 93       	push	r28
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	28 97       	sbiw	r28, 0x08	; 8
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	f8 94       	cli
     caa:	de bf       	out	0x3e, r29	; 62
     cac:	0f be       	out	0x3f, r0	; 63
     cae:	cd bf       	out	0x3d, r28	; 61
     cb0:	69 83       	std	Y+1, r22	; 0x01
     cb2:	7a 83       	std	Y+2, r23	; 0x02
     cb4:	8b 83       	std	Y+3, r24	; 0x03
     cb6:	9c 83       	std	Y+4, r25	; 0x04
     cb8:	2d 83       	std	Y+5, r18	; 0x05
     cba:	3e 83       	std	Y+6, r19	; 0x06
     cbc:	4f 83       	std	Y+7, r20	; 0x07
     cbe:	58 87       	std	Y+8, r21	; 0x08
	sub=0;
     cc0:	10 92 6a 00 	sts	0x006A, r1
	LCD_integerToString(x-y);
     cc4:	29 81       	ldd	r18, Y+1	; 0x01
     cc6:	3a 81       	ldd	r19, Y+2	; 0x02
     cc8:	4b 81       	ldd	r20, Y+3	; 0x03
     cca:	5c 81       	ldd	r21, Y+4	; 0x04
     ccc:	8d 81       	ldd	r24, Y+5	; 0x05
     cce:	9e 81       	ldd	r25, Y+6	; 0x06
     cd0:	af 81       	ldd	r26, Y+7	; 0x07
     cd2:	b8 85       	ldd	r27, Y+8	; 0x08
     cd4:	79 01       	movw	r14, r18
     cd6:	8a 01       	movw	r16, r20
     cd8:	e8 1a       	sub	r14, r24
     cda:	f9 0a       	sbc	r15, r25
     cdc:	0a 0b       	sbc	r16, r26
     cde:	1b 0b       	sbc	r17, r27
     ce0:	d8 01       	movw	r26, r16
     ce2:	c7 01       	movw	r24, r14
     ce4:	5c 01       	movw	r10, r24
     ce6:	6d 01       	movw	r12, r26
     ce8:	ee 24       	eor	r14, r14
     cea:	ff 24       	eor	r15, r15
     cec:	87 01       	movw	r16, r14
     cee:	2a 2d       	mov	r18, r10
     cf0:	3b 2d       	mov	r19, r11
     cf2:	4c 2d       	mov	r20, r12
     cf4:	5d 2d       	mov	r21, r13
     cf6:	6e 2d       	mov	r22, r14
     cf8:	7f 2d       	mov	r23, r15
     cfa:	80 2f       	mov	r24, r16
     cfc:	91 2f       	mov	r25, r17
     cfe:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_integerToString>
}
     d02:	28 96       	adiw	r28, 0x08	; 8
     d04:	0f b6       	in	r0, 0x3f	; 63
     d06:	f8 94       	cli
     d08:	de bf       	out	0x3e, r29	; 62
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	cd bf       	out	0x3d, r28	; 61
     d0e:	cf 91       	pop	r28
     d10:	df 91       	pop	r29
     d12:	1f 91       	pop	r17
     d14:	0f 91       	pop	r16
     d16:	ff 90       	pop	r15
     d18:	ef 90       	pop	r14
     d1a:	df 90       	pop	r13
     d1c:	cf 90       	pop	r12
     d1e:	bf 90       	pop	r11
     d20:	af 90       	pop	r10
     d22:	08 95       	ret

00000d24 <division>:
void division(uint32 x, uint32 y)
{
     d24:	af 92       	push	r10
     d26:	bf 92       	push	r11
     d28:	cf 92       	push	r12
     d2a:	df 92       	push	r13
     d2c:	ef 92       	push	r14
     d2e:	ff 92       	push	r15
     d30:	0f 93       	push	r16
     d32:	1f 93       	push	r17
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	cd b7       	in	r28, 0x3d	; 61
     d3a:	de b7       	in	r29, 0x3e	; 62
     d3c:	28 97       	sbiw	r28, 0x08	; 8
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	de bf       	out	0x3e, r29	; 62
     d44:	0f be       	out	0x3f, r0	; 63
     d46:	cd bf       	out	0x3d, r28	; 61
     d48:	69 83       	std	Y+1, r22	; 0x01
     d4a:	7a 83       	std	Y+2, r23	; 0x02
     d4c:	8b 83       	std	Y+3, r24	; 0x03
     d4e:	9c 83       	std	Y+4, r25	; 0x04
     d50:	2d 83       	std	Y+5, r18	; 0x05
     d52:	3e 83       	std	Y+6, r19	; 0x06
     d54:	4f 83       	std	Y+7, r20	; 0x07
     d56:	58 87       	std	Y+8, r21	; 0x08
	divide=0;
     d58:	10 92 6b 00 	sts	0x006B, r1
	LCD_integerToString(x/y);
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	9a 81       	ldd	r25, Y+2	; 0x02
     d60:	ab 81       	ldd	r26, Y+3	; 0x03
     d62:	bc 81       	ldd	r27, Y+4	; 0x04
     d64:	2d 81       	ldd	r18, Y+5	; 0x05
     d66:	3e 81       	ldd	r19, Y+6	; 0x06
     d68:	4f 81       	ldd	r20, Y+7	; 0x07
     d6a:	58 85       	ldd	r21, Y+8	; 0x08
     d6c:	bc 01       	movw	r22, r24
     d6e:	cd 01       	movw	r24, r26
     d70:	0e 94 2e 13 	call	0x265c	; 0x265c <__udivmodsi4>
     d74:	da 01       	movw	r26, r20
     d76:	c9 01       	movw	r24, r18
     d78:	5c 01       	movw	r10, r24
     d7a:	6d 01       	movw	r12, r26
     d7c:	ee 24       	eor	r14, r14
     d7e:	ff 24       	eor	r15, r15
     d80:	87 01       	movw	r16, r14
     d82:	2a 2d       	mov	r18, r10
     d84:	3b 2d       	mov	r19, r11
     d86:	4c 2d       	mov	r20, r12
     d88:	5d 2d       	mov	r21, r13
     d8a:	6e 2d       	mov	r22, r14
     d8c:	7f 2d       	mov	r23, r15
     d8e:	80 2f       	mov	r24, r16
     d90:	91 2f       	mov	r25, r17
     d92:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_integerToString>
}
     d96:	28 96       	adiw	r28, 0x08	; 8
     d98:	0f b6       	in	r0, 0x3f	; 63
     d9a:	f8 94       	cli
     d9c:	de bf       	out	0x3e, r29	; 62
     d9e:	0f be       	out	0x3f, r0	; 63
     da0:	cd bf       	out	0x3d, r28	; 61
     da2:	cf 91       	pop	r28
     da4:	df 91       	pop	r29
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	ff 90       	pop	r15
     dac:	ef 90       	pop	r14
     dae:	df 90       	pop	r13
     db0:	cf 90       	pop	r12
     db2:	bf 90       	pop	r11
     db4:	af 90       	pop	r10
     db6:	08 95       	ret

00000db8 <main>:
int main(void)
{
     db8:	af 92       	push	r10
     dba:	bf 92       	push	r11
     dbc:	cf 92       	push	r12
     dbe:	df 92       	push	r13
     dc0:	ef 92       	push	r14
     dc2:	ff 92       	push	r15
     dc4:	0f 93       	push	r16
     dc6:	1f 93       	push	r17
     dc8:	df 93       	push	r29
     dca:	cf 93       	push	r28
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	a0 97       	sbiw	r28, 0x20	; 32
     dd2:	0f b6       	in	r0, 0x3f	; 63
     dd4:	f8 94       	cli
     dd6:	de bf       	out	0x3e, r29	; 62
     dd8:	0f be       	out	0x3f, r0	; 63
     dda:	cd bf       	out	0x3d, r28	; 61

LCD_init();
     ddc:	0e 94 01 0a 	call	0x1402	; 0x1402 <LCD_init>

uint32 *arrPtr = operand;
     de0:	81 e7       	ldi	r24, 0x71	; 113
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	9e 8f       	std	Y+30, r25	; 0x1e
     de6:	8d 8f       	std	Y+29, r24	; 0x1d

	while(1)
	{
		key=KeyPad_getPressedKey();
     de8:	0e 94 03 09 	call	0x1206	; 0x1206 <KeyPad_getPressedKey>
     dec:	80 93 79 00 	sts	0x0079, r24
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	aa ef       	ldi	r26, 0xFA	; 250
     df6:	b3 e4       	ldi	r27, 0x43	; 67
     df8:	89 8f       	std	Y+25, r24	; 0x19
     dfa:	9a 8f       	std	Y+26, r25	; 0x1a
     dfc:	ab 8f       	std	Y+27, r26	; 0x1b
     dfe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e00:	69 8d       	ldd	r22, Y+25	; 0x19
     e02:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e04:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e06:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	4a e7       	ldi	r20, 0x7A	; 122
     e0e:	53 e4       	ldi	r21, 0x43	; 67
     e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	8d 8b       	std	Y+21, r24	; 0x15
     e1a:	9e 8b       	std	Y+22, r25	; 0x16
     e1c:	af 8b       	std	Y+23, r26	; 0x17
     e1e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e20:	6d 89       	ldd	r22, Y+21	; 0x15
     e22:	7e 89       	ldd	r23, Y+22	; 0x16
     e24:	8f 89       	ldd	r24, Y+23	; 0x17
     e26:	98 8d       	ldd	r25, Y+24	; 0x18
     e28:	20 e0       	ldi	r18, 0x00	; 0
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	40 e8       	ldi	r20, 0x80	; 128
     e2e:	5f e3       	ldi	r21, 0x3F	; 63
     e30:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e34:	88 23       	and	r24, r24
     e36:	2c f4       	brge	.+10     	; 0xe42 <main+0x8a>
		__ticks = 1;
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	9c 8b       	std	Y+20, r25	; 0x14
     e3e:	8b 8b       	std	Y+19, r24	; 0x13
     e40:	3f c0       	rjmp	.+126    	; 0xec0 <main+0x108>
	else if (__tmp > 65535)
     e42:	6d 89       	ldd	r22, Y+21	; 0x15
     e44:	7e 89       	ldd	r23, Y+22	; 0x16
     e46:	8f 89       	ldd	r24, Y+23	; 0x17
     e48:	98 8d       	ldd	r25, Y+24	; 0x18
     e4a:	20 e0       	ldi	r18, 0x00	; 0
     e4c:	3f ef       	ldi	r19, 0xFF	; 255
     e4e:	4f e7       	ldi	r20, 0x7F	; 127
     e50:	57 e4       	ldi	r21, 0x47	; 71
     e52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e56:	18 16       	cp	r1, r24
     e58:	4c f5       	brge	.+82     	; 0xeac <main+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e5a:	69 8d       	ldd	r22, Y+25	; 0x19
     e5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e60:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e2       	ldi	r20, 0x20	; 32
     e68:	51 e4       	ldi	r21, 0x41	; 65
     e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	bc 01       	movw	r22, r24
     e74:	cd 01       	movw	r24, r26
     e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	9c 8b       	std	Y+20, r25	; 0x14
     e80:	8b 8b       	std	Y+19, r24	; 0x13
     e82:	0f c0       	rjmp	.+30     	; 0xea2 <main+0xea>
     e84:	89 e1       	ldi	r24, 0x19	; 25
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	9a 8b       	std	Y+18, r25	; 0x12
     e8a:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e8c:	89 89       	ldd	r24, Y+17	; 0x11
     e8e:	9a 89       	ldd	r25, Y+18	; 0x12
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <main+0xd8>
     e94:	9a 8b       	std	Y+18, r25	; 0x12
     e96:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e98:	8b 89       	ldd	r24, Y+19	; 0x13
     e9a:	9c 89       	ldd	r25, Y+20	; 0x14
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	9c 8b       	std	Y+20, r25	; 0x14
     ea0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea2:	8b 89       	ldd	r24, Y+19	; 0x13
     ea4:	9c 89       	ldd	r25, Y+20	; 0x14
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	69 f7       	brne	.-38     	; 0xe84 <main+0xcc>
     eaa:	14 c0       	rjmp	.+40     	; 0xed4 <main+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eac:	6d 89       	ldd	r22, Y+21	; 0x15
     eae:	7e 89       	ldd	r23, Y+22	; 0x16
     eb0:	8f 89       	ldd	r24, Y+23	; 0x17
     eb2:	98 8d       	ldd	r25, Y+24	; 0x18
     eb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	9c 8b       	std	Y+20, r25	; 0x14
     ebe:	8b 8b       	std	Y+19, r24	; 0x13
     ec0:	8b 89       	ldd	r24, Y+19	; 0x13
     ec2:	9c 89       	ldd	r25, Y+20	; 0x14
     ec4:	98 8b       	std	Y+16, r25	; 0x10
     ec6:	8f 87       	std	Y+15, r24	; 0x0f
     ec8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eca:	98 89       	ldd	r25, Y+16	; 0x10
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <main+0x114>
     ed0:	98 8b       	std	Y+16, r25	; 0x10
     ed2:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);

		if((key<=9) && (key>=0))
     ed4:	80 91 79 00 	lds	r24, 0x0079
     ed8:	8a 30       	cpi	r24, 0x0A	; 10
     eda:	08 f0       	brcs	.+2      	; 0xede <main+0x126>
     edc:	cd c0       	rjmp	.+410    	; 0x1078 <main+0x2c0>
		{
			LCD_integerToString(key);
     ede:	80 91 79 00 	lds	r24, 0x0079
     ee2:	a8 2e       	mov	r10, r24
     ee4:	bb 24       	eor	r11, r11
     ee6:	cc 24       	eor	r12, r12
     ee8:	dd 24       	eor	r13, r13
     eea:	ee 24       	eor	r14, r14
     eec:	ff 24       	eor	r15, r15
     eee:	87 01       	movw	r16, r14
     ef0:	2a 2d       	mov	r18, r10
     ef2:	3b 2d       	mov	r19, r11
     ef4:	4c 2d       	mov	r20, r12
     ef6:	5d 2d       	mov	r21, r13
     ef8:	6e 2d       	mov	r22, r14
     efa:	7f 2d       	mov	r23, r15
     efc:	80 2f       	mov	r24, r16
     efe:	91 2f       	mov	r25, r17
     f00:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_integerToString>
			*arrPtr= (uint32)key;
     f04:	80 91 79 00 	lds	r24, 0x0079
     f08:	88 2f       	mov	r24, r24
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	ed 8d       	ldd	r30, Y+29	; 0x1d
     f12:	fe 8d       	ldd	r31, Y+30	; 0x1e
     f14:	80 83       	st	Z, r24
     f16:	91 83       	std	Z+1, r25	; 0x01
     f18:	a2 83       	std	Z+2, r26	; 0x02
     f1a:	b3 83       	std	Z+3, r27	; 0x03
     f1c:	ad c0       	rjmp	.+346    	; 0x1078 <main+0x2c0>
		}
		while ((key<=9) && (key>=0))
		{
			key=KeyPad_getPressedKey();
     f1e:	0e 94 03 09 	call	0x1206	; 0x1206 <KeyPad_getPressedKey>
     f22:	80 93 79 00 	sts	0x0079, r24
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	aa ef       	ldi	r26, 0xFA	; 250
     f2c:	b3 e4       	ldi	r27, 0x43	; 67
     f2e:	8b 87       	std	Y+11, r24	; 0x0b
     f30:	9c 87       	std	Y+12, r25	; 0x0c
     f32:	ad 87       	std	Y+13, r26	; 0x0d
     f34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f36:	6b 85       	ldd	r22, Y+11	; 0x0b
     f38:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	4a e7       	ldi	r20, 0x7A	; 122
     f44:	53 e4       	ldi	r21, 0x43	; 67
     f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	8f 83       	std	Y+7, r24	; 0x07
     f50:	98 87       	std	Y+8, r25	; 0x08
     f52:	a9 87       	std	Y+9, r26	; 0x09
     f54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f56:	6f 81       	ldd	r22, Y+7	; 0x07
     f58:	78 85       	ldd	r23, Y+8	; 0x08
     f5a:	89 85       	ldd	r24, Y+9	; 0x09
     f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	40 e8       	ldi	r20, 0x80	; 128
     f64:	5f e3       	ldi	r21, 0x3F	; 63
     f66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f6a:	88 23       	and	r24, r24
     f6c:	2c f4       	brge	.+10     	; 0xf78 <main+0x1c0>
		__ticks = 1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9e 83       	std	Y+6, r25	; 0x06
     f74:	8d 83       	std	Y+5, r24	; 0x05
     f76:	3f c0       	rjmp	.+126    	; 0xff6 <main+0x23e>
	else if (__tmp > 65535)
     f78:	6f 81       	ldd	r22, Y+7	; 0x07
     f7a:	78 85       	ldd	r23, Y+8	; 0x08
     f7c:	89 85       	ldd	r24, Y+9	; 0x09
     f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f80:	20 e0       	ldi	r18, 0x00	; 0
     f82:	3f ef       	ldi	r19, 0xFF	; 255
     f84:	4f e7       	ldi	r20, 0x7F	; 127
     f86:	57 e4       	ldi	r21, 0x47	; 71
     f88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f8c:	18 16       	cp	r1, r24
     f8e:	4c f5       	brge	.+82     	; 0xfe2 <main+0x22a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f90:	6b 85       	ldd	r22, Y+11	; 0x0b
     f92:	7c 85       	ldd	r23, Y+12	; 0x0c
     f94:	8d 85       	ldd	r24, Y+13	; 0x0d
     f96:	9e 85       	ldd	r25, Y+14	; 0x0e
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 e2       	ldi	r20, 0x20	; 32
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa4:	dc 01       	movw	r26, r24
     fa6:	cb 01       	movw	r24, r22
     fa8:	bc 01       	movw	r22, r24
     faa:	cd 01       	movw	r24, r26
     fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb0:	dc 01       	movw	r26, r24
     fb2:	cb 01       	movw	r24, r22
     fb4:	9e 83       	std	Y+6, r25	; 0x06
     fb6:	8d 83       	std	Y+5, r24	; 0x05
     fb8:	0f c0       	rjmp	.+30     	; 0xfd8 <main+0x220>
     fba:	89 e1       	ldi	r24, 0x19	; 25
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	9c 83       	std	Y+4, r25	; 0x04
     fc0:	8b 83       	std	Y+3, r24	; 0x03
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	01 97       	sbiw	r24, 0x01	; 1
     fc8:	f1 f7       	brne	.-4      	; 0xfc6 <main+0x20e>
     fca:	9c 83       	std	Y+4, r25	; 0x04
     fcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	9e 83       	std	Y+6, r25	; 0x06
     fd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	00 97       	sbiw	r24, 0x00	; 0
     fde:	69 f7       	brne	.-38     	; 0xfba <main+0x202>
     fe0:	14 c0       	rjmp	.+40     	; 0x100a <main+0x252>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe2:	6f 81       	ldd	r22, Y+7	; 0x07
     fe4:	78 85       	ldd	r23, Y+8	; 0x08
     fe6:	89 85       	ldd	r24, Y+9	; 0x09
     fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fee:	dc 01       	movw	r26, r24
     ff0:	cb 01       	movw	r24, r22
     ff2:	9e 83       	std	Y+6, r25	; 0x06
     ff4:	8d 83       	std	Y+5, r24	; 0x05
     ff6:	8d 81       	ldd	r24, Y+5	; 0x05
     ff8:	9e 81       	ldd	r25, Y+6	; 0x06
     ffa:	9a 83       	std	Y+2, r25	; 0x02
     ffc:	89 83       	std	Y+1, r24	; 0x01
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	9a 81       	ldd	r25, Y+2	; 0x02
    1002:	01 97       	sbiw	r24, 0x01	; 1
    1004:	f1 f7       	brne	.-4      	; 0x1002 <main+0x24a>
    1006:	9a 83       	std	Y+2, r25	; 0x02
    1008:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			if (!((key<=9) && (key>=0)))
    100a:	80 91 79 00 	lds	r24, 0x0079
    100e:	8a 30       	cpi	r24, 0x0A	; 10
    1010:	c0 f5       	brcc	.+112    	; 0x1082 <main+0x2ca>
				break;
			LCD_integerToString(key);
    1012:	80 91 79 00 	lds	r24, 0x0079
    1016:	a8 2e       	mov	r10, r24
    1018:	bb 24       	eor	r11, r11
    101a:	cc 24       	eor	r12, r12
    101c:	dd 24       	eor	r13, r13
    101e:	ee 24       	eor	r14, r14
    1020:	ff 24       	eor	r15, r15
    1022:	87 01       	movw	r16, r14
    1024:	2a 2d       	mov	r18, r10
    1026:	3b 2d       	mov	r19, r11
    1028:	4c 2d       	mov	r20, r12
    102a:	5d 2d       	mov	r21, r13
    102c:	6e 2d       	mov	r22, r14
    102e:	7f 2d       	mov	r23, r15
    1030:	80 2f       	mov	r24, r16
    1032:	91 2f       	mov	r25, r17
    1034:	0e 94 d4 12 	call	0x25a8	; 0x25a8 <LCD_integerToString>
			*arrPtr= (*arrPtr*10)+key;
    1038:	ed 8d       	ldd	r30, Y+29	; 0x1d
    103a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    103c:	80 81       	ld	r24, Z
    103e:	91 81       	ldd	r25, Z+1	; 0x01
    1040:	a2 81       	ldd	r26, Z+2	; 0x02
    1042:	b3 81       	ldd	r27, Z+3	; 0x03
    1044:	2a e0       	ldi	r18, 0x0A	; 10
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	40 e0       	ldi	r20, 0x00	; 0
    104a:	50 e0       	ldi	r21, 0x00	; 0
    104c:	bc 01       	movw	r22, r24
    104e:	cd 01       	movw	r24, r26
    1050:	0e 94 0f 13 	call	0x261e	; 0x261e <__mulsi3>
    1054:	9b 01       	movw	r18, r22
    1056:	ac 01       	movw	r20, r24
    1058:	80 91 79 00 	lds	r24, 0x0079
    105c:	88 2f       	mov	r24, r24
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	a0 e0       	ldi	r26, 0x00	; 0
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	82 0f       	add	r24, r18
    1066:	93 1f       	adc	r25, r19
    1068:	a4 1f       	adc	r26, r20
    106a:	b5 1f       	adc	r27, r21
    106c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    106e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1070:	80 83       	st	Z, r24
    1072:	91 83       	std	Z+1, r25	; 0x01
    1074:	a2 83       	std	Z+2, r26	; 0x02
    1076:	b3 83       	std	Z+3, r27	; 0x03
		if((key<=9) && (key>=0))
		{
			LCD_integerToString(key);
			*arrPtr= (uint32)key;
		}
		while ((key<=9) && (key>=0))
    1078:	80 91 79 00 	lds	r24, 0x0079
    107c:	8a 30       	cpi	r24, 0x0A	; 10
    107e:	08 f4       	brcc	.+2      	; 0x1082 <main+0x2ca>
    1080:	4e cf       	rjmp	.-356    	; 0xf1e <main+0x166>
				break;
			LCD_integerToString(key);
			*arrPtr= (*arrPtr*10)+key;
		}

			switch(key)
    1082:	80 91 79 00 	lds	r24, 0x0079
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	38 a3       	std	Y+32, r19	; 0x20
    108c:	2f 8f       	std	Y+31, r18	; 0x1f
    108e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1090:	98 a1       	ldd	r25, Y+32	; 0x20
    1092:	8b 32       	cpi	r24, 0x2B	; 43
    1094:	91 05       	cpc	r25, r1
    1096:	e9 f1       	breq	.+122    	; 0x1112 <main+0x35a>
    1098:	2f 8d       	ldd	r18, Y+31	; 0x1f
    109a:	38 a1       	ldd	r19, Y+32	; 0x20
    109c:	2c 32       	cpi	r18, 0x2C	; 44
    109e:	31 05       	cpc	r19, r1
    10a0:	34 f4       	brge	.+12     	; 0x10ae <main+0x2f6>
    10a2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10a4:	98 a1       	ldd	r25, Y+32	; 0x20
    10a6:	8a 32       	cpi	r24, 0x2A	; 42
    10a8:	91 05       	cpc	r25, r1
    10aa:	61 f0       	breq	.+24     	; 0x10c4 <main+0x30c>
    10ac:	3e c0       	rjmp	.+124    	; 0x112a <main+0x372>
    10ae:	2f 8d       	ldd	r18, Y+31	; 0x1f
    10b0:	38 a1       	ldd	r19, Y+32	; 0x20
    10b2:	2d 32       	cpi	r18, 0x2D	; 45
    10b4:	31 05       	cpc	r19, r1
    10b6:	01 f1       	breq	.+64     	; 0x10f8 <main+0x340>
    10b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10ba:	98 a1       	ldd	r25, Y+32	; 0x20
    10bc:	8f 32       	cpi	r24, 0x2F	; 47
    10be:	91 05       	cpc	r25, r1
    10c0:	71 f0       	breq	.+28     	; 0x10de <main+0x326>
    10c2:	33 c0       	rjmp	.+102    	; 0x112a <main+0x372>
			{
			lastNum =0;
			case '*':
				mul=1;
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	80 93 68 00 	sts	0x0068, r24
				LCD_displayCharacter(key);
    10ca:	80 91 79 00 	lds	r24, 0x0079
    10ce:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <LCD_displayCharacter>
				arrPtr++;
    10d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10d6:	04 96       	adiw	r24, 0x04	; 4
    10d8:	9e 8f       	std	Y+30, r25	; 0x1e
    10da:	8d 8f       	std	Y+29, r24	; 0x1d
    10dc:	26 c0       	rjmp	.+76     	; 0x112a <main+0x372>
			break;
			case '/':
				divide=1;
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	80 93 6b 00 	sts	0x006B, r24
				LCD_displayCharacter(key);
    10e4:	80 91 79 00 	lds	r24, 0x0079
    10e8:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <LCD_displayCharacter>
				arrPtr++;
    10ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10f0:	04 96       	adiw	r24, 0x04	; 4
    10f2:	9e 8f       	std	Y+30, r25	; 0x1e
    10f4:	8d 8f       	std	Y+29, r24	; 0x1d
    10f6:	19 c0       	rjmp	.+50     	; 0x112a <main+0x372>
			break;
			case '-':
				sub=1;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	80 93 6a 00 	sts	0x006A, r24
				LCD_displayCharacter(key);
    10fe:	80 91 79 00 	lds	r24, 0x0079
    1102:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <LCD_displayCharacter>
				arrPtr++;
    1106:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1108:	9e 8d       	ldd	r25, Y+30	; 0x1e
    110a:	04 96       	adiw	r24, 0x04	; 4
    110c:	9e 8f       	std	Y+30, r25	; 0x1e
    110e:	8d 8f       	std	Y+29, r24	; 0x1d
    1110:	0c c0       	rjmp	.+24     	; 0x112a <main+0x372>
			break;
			case '+':
				add=1;
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	80 93 69 00 	sts	0x0069, r24
				LCD_displayCharacter(key);
    1118:	80 91 79 00 	lds	r24, 0x0079
    111c:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <LCD_displayCharacter>
				arrPtr++;
    1120:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1122:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1124:	04 96       	adiw	r24, 0x04	; 4
    1126:	9e 8f       	std	Y+30, r25	; 0x1e
    1128:	8d 8f       	std	Y+29, r24	; 0x1d
			break;
			default:break;
			}
			if (key=='=')
    112a:	80 91 79 00 	lds	r24, 0x0079
    112e:	8d 33       	cpi	r24, 0x3D	; 61
    1130:	09 f0       	breq	.+2      	; 0x1134 <main+0x37c>
    1132:	5a ce       	rjmp	.-844    	; 0xde8 <main+0x30>
			{
				LCD_displayCharacter(key);
    1134:	80 91 79 00 	lds	r24, 0x0079
    1138:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <LCD_displayCharacter>
				if (mul==1)
    113c:	80 91 68 00 	lds	r24, 0x0068
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	a9 f4       	brne	.+42     	; 0x116e <main+0x3b6>
				{
					mult(operand[0], operand[1]);
    1144:	80 91 71 00 	lds	r24, 0x0071
    1148:	90 91 72 00 	lds	r25, 0x0072
    114c:	a0 91 73 00 	lds	r26, 0x0073
    1150:	b0 91 74 00 	lds	r27, 0x0074
    1154:	20 91 75 00 	lds	r18, 0x0075
    1158:	30 91 76 00 	lds	r19, 0x0076
    115c:	40 91 77 00 	lds	r20, 0x0077
    1160:	50 91 78 00 	lds	r21, 0x0078
    1164:	bc 01       	movw	r22, r24
    1166:	cd 01       	movw	r24, r26
    1168:	0e 94 a3 05 	call	0xb46	; 0xb46 <mult>
    116c:	3d ce       	rjmp	.-902    	; 0xde8 <main+0x30>
				}
				else if (add==1)
    116e:	80 91 69 00 	lds	r24, 0x0069
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	a9 f4       	brne	.+42     	; 0x11a0 <main+0x3e8>
				{
					addition(operand[0], operand[1]);
    1176:	80 91 71 00 	lds	r24, 0x0071
    117a:	90 91 72 00 	lds	r25, 0x0072
    117e:	a0 91 73 00 	lds	r26, 0x0073
    1182:	b0 91 74 00 	lds	r27, 0x0074
    1186:	20 91 75 00 	lds	r18, 0x0075
    118a:	30 91 76 00 	lds	r19, 0x0076
    118e:	40 91 77 00 	lds	r20, 0x0077
    1192:	50 91 78 00 	lds	r21, 0x0078
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 fe 05 	call	0xbfc	; 0xbfc <addition>
    119e:	24 ce       	rjmp	.-952    	; 0xde8 <main+0x30>
				}
				else if (sub==1)
    11a0:	80 91 6a 00 	lds	r24, 0x006A
    11a4:	81 30       	cpi	r24, 0x01	; 1
    11a6:	a9 f4       	brne	.+42     	; 0x11d2 <main+0x41a>
				{
					subtraction(operand[0], operand[1]);
    11a8:	80 91 71 00 	lds	r24, 0x0071
    11ac:	90 91 72 00 	lds	r25, 0x0072
    11b0:	a0 91 73 00 	lds	r26, 0x0073
    11b4:	b0 91 74 00 	lds	r27, 0x0074
    11b8:	20 91 75 00 	lds	r18, 0x0075
    11bc:	30 91 76 00 	lds	r19, 0x0076
    11c0:	40 91 77 00 	lds	r20, 0x0077
    11c4:	50 91 78 00 	lds	r21, 0x0078
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	0e 94 46 06 	call	0xc8c	; 0xc8c <subtraction>
    11d0:	0b ce       	rjmp	.-1002   	; 0xde8 <main+0x30>
				}
				else if (divide==1)
    11d2:	80 91 6b 00 	lds	r24, 0x006B
    11d6:	81 30       	cpi	r24, 0x01	; 1
    11d8:	09 f0       	breq	.+2      	; 0x11dc <main+0x424>
    11da:	06 ce       	rjmp	.-1012   	; 0xde8 <main+0x30>
				{
					division(operand[0], operand[1]);
    11dc:	80 91 71 00 	lds	r24, 0x0071
    11e0:	90 91 72 00 	lds	r25, 0x0072
    11e4:	a0 91 73 00 	lds	r26, 0x0073
    11e8:	b0 91 74 00 	lds	r27, 0x0074
    11ec:	20 91 75 00 	lds	r18, 0x0075
    11f0:	30 91 76 00 	lds	r19, 0x0076
    11f4:	40 91 77 00 	lds	r20, 0x0077
    11f8:	50 91 78 00 	lds	r21, 0x0078
    11fc:	bc 01       	movw	r22, r24
    11fe:	cd 01       	movw	r24, r26
    1200:	0e 94 92 06 	call	0xd24	; 0xd24 <division>
    1204:	f1 cd       	rjmp	.-1054   	; 0xde8 <main+0x30>

00001206 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	00 d0       	rcall	.+0      	; 0x120c <KeyPad_getPressedKey+0x6>
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1210:	1a 82       	std	Y+2, r1	; 0x02
    1212:	4c c0       	rjmp	.+152    	; 0x12ac <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1214:	ea e3       	ldi	r30, 0x3A	; 58
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	80 e1       	ldi	r24, 0x10	; 16
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <KeyPad_getPressedKey+0x22>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	2a 95       	dec	r18
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <KeyPad_getPressedKey+0x1e>
    122c:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    122e:	eb e3       	ldi	r30, 0x3B	; 59
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	80 e1       	ldi	r24, 0x10	; 16
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <KeyPad_getPressedKey+0x3e>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <KeyPad_getPressedKey+0x3a>
    1248:	80 95       	com	r24
    124a:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    124c:	19 82       	std	Y+1, r1	; 0x01
    124e:	28 c0       	rjmp	.+80     	; 0x12a0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1250:	e9 e3       	ldi	r30, 0x39	; 57
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	88 2f       	mov	r24, r24
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	a9 01       	movw	r20, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <KeyPad_getPressedKey+0x62>
    1264:	55 95       	asr	r21
    1266:	47 95       	ror	r20
    1268:	8a 95       	dec	r24
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <KeyPad_getPressedKey+0x5e>
    126c:	ca 01       	movw	r24, r20
    126e:	81 70       	andi	r24, 0x01	; 1
    1270:	90 70       	andi	r25, 0x00	; 0
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	91 f4       	brne	.+36     	; 0x129a <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	98 2f       	mov	r25, r24
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	89 0f       	add	r24, r25
    128a:	8f 5f       	subi	r24, 0xFF	; 255
    128c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    1290:	0f 90       	pop	r0
    1292:	0f 90       	pop	r0
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    129a:	89 81       	ldd	r24, Y+1	; 0x01
    129c:	8f 5f       	subi	r24, 0xFF	; 255
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	84 30       	cpi	r24, 0x04	; 4
    12a4:	a8 f2       	brcs	.-86     	; 0x1250 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	8f 5f       	subi	r24, 0xFF	; 255
    12aa:	8a 83       	std	Y+2, r24	; 0x02
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	84 30       	cpi	r24, 0x04	; 4
    12b0:	08 f4       	brcc	.+2      	; 0x12b4 <KeyPad_getPressedKey+0xae>
    12b2:	b0 cf       	rjmp	.-160    	; 0x1214 <KeyPad_getPressedKey+0xe>
    12b4:	ad cf       	rjmp	.-166    	; 0x1210 <KeyPad_getPressedKey+0xa>

000012b6 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <KeyPad_4x4_adjustKeyNumber+0x6>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <KeyPad_4x4_adjustKeyNumber+0x8>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	89 83       	std	Y+1, r24	; 0x01
	switch(button_number)
    12c4:	89 81       	ldd	r24, Y+1	; 0x01
    12c6:	28 2f       	mov	r18, r24
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	3c 83       	std	Y+4, r19	; 0x04
    12cc:	2b 83       	std	Y+3, r18	; 0x03
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	88 30       	cpi	r24, 0x08	; 8
    12d4:	91 05       	cpc	r25, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <KeyPad_4x4_adjustKeyNumber+0x24>
    12d8:	70 c0       	rjmp	.+224    	; 0x13ba <KeyPad_4x4_adjustKeyNumber+0x104>
    12da:	2b 81       	ldd	r18, Y+3	; 0x03
    12dc:	3c 81       	ldd	r19, Y+4	; 0x04
    12de:	29 30       	cpi	r18, 0x09	; 9
    12e0:	31 05       	cpc	r19, r1
    12e2:	5c f5       	brge	.+86     	; 0x133a <KeyPad_4x4_adjustKeyNumber+0x84>
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	84 30       	cpi	r24, 0x04	; 4
    12ea:	91 05       	cpc	r25, r1
    12ec:	09 f4       	brne	.+2      	; 0x12f0 <KeyPad_4x4_adjustKeyNumber+0x3a>
    12ee:	59 c0       	rjmp	.+178    	; 0x13a2 <KeyPad_4x4_adjustKeyNumber+0xec>
    12f0:	2b 81       	ldd	r18, Y+3	; 0x03
    12f2:	3c 81       	ldd	r19, Y+4	; 0x04
    12f4:	25 30       	cpi	r18, 0x05	; 5
    12f6:	31 05       	cpc	r19, r1
    12f8:	9c f4       	brge	.+38     	; 0x1320 <KeyPad_4x4_adjustKeyNumber+0x6a>
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	82 30       	cpi	r24, 0x02	; 2
    1300:	91 05       	cpc	r25, r1
    1302:	09 f4       	brne	.+2      	; 0x1306 <KeyPad_4x4_adjustKeyNumber+0x50>
    1304:	48 c0       	rjmp	.+144    	; 0x1396 <KeyPad_4x4_adjustKeyNumber+0xe0>
    1306:	2b 81       	ldd	r18, Y+3	; 0x03
    1308:	3c 81       	ldd	r19, Y+4	; 0x04
    130a:	23 30       	cpi	r18, 0x03	; 3
    130c:	31 05       	cpc	r19, r1
    130e:	0c f0       	brlt	.+2      	; 0x1312 <KeyPad_4x4_adjustKeyNumber+0x5c>
    1310:	45 c0       	rjmp	.+138    	; 0x139c <KeyPad_4x4_adjustKeyNumber+0xe6>
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	81 30       	cpi	r24, 0x01	; 1
    1318:	91 05       	cpc	r25, r1
    131a:	09 f4       	brne	.+2      	; 0x131e <KeyPad_4x4_adjustKeyNumber+0x68>
    131c:	39 c0       	rjmp	.+114    	; 0x1390 <KeyPad_4x4_adjustKeyNumber+0xda>
    131e:	67 c0       	rjmp	.+206    	; 0x13ee <KeyPad_4x4_adjustKeyNumber+0x138>
    1320:	2b 81       	ldd	r18, Y+3	; 0x03
    1322:	3c 81       	ldd	r19, Y+4	; 0x04
    1324:	26 30       	cpi	r18, 0x06	; 6
    1326:	31 05       	cpc	r19, r1
    1328:	09 f4       	brne	.+2      	; 0x132c <KeyPad_4x4_adjustKeyNumber+0x76>
    132a:	41 c0       	rjmp	.+130    	; 0x13ae <KeyPad_4x4_adjustKeyNumber+0xf8>
    132c:	8b 81       	ldd	r24, Y+3	; 0x03
    132e:	9c 81       	ldd	r25, Y+4	; 0x04
    1330:	87 30       	cpi	r24, 0x07	; 7
    1332:	91 05       	cpc	r25, r1
    1334:	0c f0       	brlt	.+2      	; 0x1338 <KeyPad_4x4_adjustKeyNumber+0x82>
    1336:	3e c0       	rjmp	.+124    	; 0x13b4 <KeyPad_4x4_adjustKeyNumber+0xfe>
    1338:	37 c0       	rjmp	.+110    	; 0x13a8 <KeyPad_4x4_adjustKeyNumber+0xf2>
    133a:	2b 81       	ldd	r18, Y+3	; 0x03
    133c:	3c 81       	ldd	r19, Y+4	; 0x04
    133e:	2c 30       	cpi	r18, 0x0C	; 12
    1340:	31 05       	cpc	r19, r1
    1342:	09 f4       	brne	.+2      	; 0x1346 <KeyPad_4x4_adjustKeyNumber+0x90>
    1344:	46 c0       	rjmp	.+140    	; 0x13d2 <KeyPad_4x4_adjustKeyNumber+0x11c>
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	8d 30       	cpi	r24, 0x0D	; 13
    134c:	91 05       	cpc	r25, r1
    134e:	5c f4       	brge	.+22     	; 0x1366 <KeyPad_4x4_adjustKeyNumber+0xb0>
    1350:	2b 81       	ldd	r18, Y+3	; 0x03
    1352:	3c 81       	ldd	r19, Y+4	; 0x04
    1354:	2a 30       	cpi	r18, 0x0A	; 10
    1356:	31 05       	cpc	r19, r1
    1358:	b1 f1       	breq	.+108    	; 0x13c6 <KeyPad_4x4_adjustKeyNumber+0x110>
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	9c 81       	ldd	r25, Y+4	; 0x04
    135e:	8b 30       	cpi	r24, 0x0B	; 11
    1360:	91 05       	cpc	r25, r1
    1362:	a4 f5       	brge	.+104    	; 0x13cc <KeyPad_4x4_adjustKeyNumber+0x116>
    1364:	2d c0       	rjmp	.+90     	; 0x13c0 <KeyPad_4x4_adjustKeyNumber+0x10a>
    1366:	2b 81       	ldd	r18, Y+3	; 0x03
    1368:	3c 81       	ldd	r19, Y+4	; 0x04
    136a:	2e 30       	cpi	r18, 0x0E	; 14
    136c:	31 05       	cpc	r19, r1
    136e:	b9 f1       	breq	.+110    	; 0x13de <KeyPad_4x4_adjustKeyNumber+0x128>
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	8e 30       	cpi	r24, 0x0E	; 14
    1376:	91 05       	cpc	r25, r1
    1378:	7c f1       	brlt	.+94     	; 0x13d8 <KeyPad_4x4_adjustKeyNumber+0x122>
    137a:	2b 81       	ldd	r18, Y+3	; 0x03
    137c:	3c 81       	ldd	r19, Y+4	; 0x04
    137e:	2f 30       	cpi	r18, 0x0F	; 15
    1380:	31 05       	cpc	r19, r1
    1382:	79 f1       	breq	.+94     	; 0x13e2 <KeyPad_4x4_adjustKeyNumber+0x12c>
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	80 31       	cpi	r24, 0x10	; 16
    138a:	91 05       	cpc	r25, r1
    138c:	69 f1       	breq	.+90     	; 0x13e8 <KeyPad_4x4_adjustKeyNumber+0x132>
    138e:	2f c0       	rjmp	.+94     	; 0x13ee <KeyPad_4x4_adjustKeyNumber+0x138>
	{
		case 1: return 7; 
    1390:	97 e0       	ldi	r25, 0x07	; 7
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	2e c0       	rjmp	.+92     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 2: return 8; 
    1396:	28 e0       	ldi	r18, 0x08	; 8
    1398:	2a 83       	std	Y+2, r18	; 0x02
    139a:	2b c0       	rjmp	.+86     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 3: return 9; 
    139c:	39 e0       	ldi	r19, 0x09	; 9
    139e:	3a 83       	std	Y+2, r19	; 0x02
    13a0:	28 c0       	rjmp	.+80     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 4: return '/'; // ASCII Code of %
    13a2:	8f e2       	ldi	r24, 0x2F	; 47
    13a4:	8a 83       	std	Y+2, r24	; 0x02
    13a6:	25 c0       	rjmp	.+74     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 5: return 4; 
    13a8:	94 e0       	ldi	r25, 0x04	; 4
    13aa:	9a 83       	std	Y+2, r25	; 0x02
    13ac:	22 c0       	rjmp	.+68     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 6: return 5;
    13ae:	25 e0       	ldi	r18, 0x05	; 5
    13b0:	2a 83       	std	Y+2, r18	; 0x02
    13b2:	1f c0       	rjmp	.+62     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 7: return 6; 
    13b4:	36 e0       	ldi	r19, 0x06	; 6
    13b6:	3a 83       	std	Y+2, r19	; 0x02
    13b8:	1c c0       	rjmp	.+56     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    13ba:	8a e2       	ldi	r24, 0x2A	; 42
    13bc:	8a 83       	std	Y+2, r24	; 0x02
    13be:	19 c0       	rjmp	.+50     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;		
		case 9: return 1; 
    13c0:	91 e0       	ldi	r25, 0x01	; 1
    13c2:	9a 83       	std	Y+2, r25	; 0x02
    13c4:	16 c0       	rjmp	.+44     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 10: return 2; 
    13c6:	22 e0       	ldi	r18, 0x02	; 2
    13c8:	2a 83       	std	Y+2, r18	; 0x02
    13ca:	13 c0       	rjmp	.+38     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 11: return 3; 
    13cc:	33 e0       	ldi	r19, 0x03	; 3
    13ce:	3a 83       	std	Y+2, r19	; 0x02
    13d0:	10 c0       	rjmp	.+32     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    13d2:	8d e2       	ldi	r24, 0x2D	; 45
    13d4:	8a 83       	std	Y+2, r24	; 0x02
    13d6:	0d c0       	rjmp	.+26     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 13: return 13;  /* ASCII of Enter */
    13d8:	9d e0       	ldi	r25, 0x0D	; 13
    13da:	9a 83       	std	Y+2, r25	; 0x02
    13dc:	0a c0       	rjmp	.+20     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;			
		case 14: return 0; 
    13de:	1a 82       	std	Y+2, r1	; 0x02
    13e0:	08 c0       	rjmp	.+16     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    13e2:	2d e3       	ldi	r18, 0x3D	; 61
    13e4:	2a 83       	std	Y+2, r18	; 0x02
    13e6:	05 c0       	rjmp	.+10     	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    13e8:	3b e2       	ldi	r19, 0x2B	; 43
    13ea:	3a 83       	std	Y+2, r19	; 0x02
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <KeyPad_4x4_adjustKeyNumber+0x13c>
				break;
		default: return button_number;								 						
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	8a 83       	std	Y+2, r24	; 0x02
    13f2:	8a 81       	ldd	r24, Y+2	; 0x02
	}
} 
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	cf 91       	pop	r28
    13fe:	df 91       	pop	r29
    1400:	08 95       	ret

00001402 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1402:	df 93       	push	r29
    1404:	cf 93       	push	r28
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    140a:	a7 e3       	ldi	r26, 0x37	; 55
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	e7 e3       	ldi	r30, 0x37	; 55
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	8e 60       	ori	r24, 0x0E	; 14
    1416:	8c 93       	st	X, r24
	
	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
    1418:	a1 e3       	ldi	r26, 0x31	; 49
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	e1 e3       	ldi	r30, 0x31	; 49
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	80 81       	ld	r24, Z
    1422:	8f 60       	ori	r24, 0x0F	; 15
    1424:	8c 93       	st	X, r24
		#endif		 
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
    1426:	82 e0       	ldi	r24, 0x02	; 2
    1428:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
    142c:	88 e2       	ldi	r24, 0x28	; 40
    142e:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1432:	8c e0       	ldi	r24, 0x0C	; 12
    1434:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCD_sendCommand>
}
    143e:	cf 91       	pop	r28
    1440:	df 91       	pop	r29
    1442:	08 95       	ret

00001444 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	c3 56       	subi	r28, 0x63	; 99
    1452:	d0 40       	sbci	r29, 0x00	; 0
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	fe 01       	movw	r30, r28
    1460:	ed 59       	subi	r30, 0x9D	; 157
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    1466:	a8 e3       	ldi	r26, 0x38	; 56
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e8 e3       	ldi	r30, 0x38	; 56
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8d 7f       	andi	r24, 0xFD	; 253
    1472:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1474:	a8 e3       	ldi	r26, 0x38	; 56
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e8 e3       	ldi	r30, 0x38	; 56
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	8b 7f       	andi	r24, 0xFB	; 251
    1480:	8c 93       	st	X, r24
    1482:	fe 01       	movw	r30, r28
    1484:	e1 5a       	subi	r30, 0xA1	; 161
    1486:	ff 4f       	sbci	r31, 0xFF	; 255
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a0 e8       	ldi	r26, 0x80	; 128
    148e:	bf e3       	ldi	r27, 0x3F	; 63
    1490:	80 83       	st	Z, r24
    1492:	91 83       	std	Z+1, r25	; 0x01
    1494:	a2 83       	std	Z+2, r26	; 0x02
    1496:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1498:	8e 01       	movw	r16, r28
    149a:	05 5a       	subi	r16, 0xA5	; 165
    149c:	1f 4f       	sbci	r17, 0xFF	; 255
    149e:	fe 01       	movw	r30, r28
    14a0:	e1 5a       	subi	r30, 0xA1	; 161
    14a2:	ff 4f       	sbci	r31, 0xFF	; 255
    14a4:	60 81       	ld	r22, Z
    14a6:	71 81       	ldd	r23, Z+1	; 0x01
    14a8:	82 81       	ldd	r24, Z+2	; 0x02
    14aa:	93 81       	ldd	r25, Z+3	; 0x03
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	4a e7       	ldi	r20, 0x7A	; 122
    14b2:	53 e4       	ldi	r21, 0x43	; 67
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	f8 01       	movw	r30, r16
    14be:	80 83       	st	Z, r24
    14c0:	91 83       	std	Z+1, r25	; 0x01
    14c2:	a2 83       	std	Z+2, r26	; 0x02
    14c4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14c6:	fe 01       	movw	r30, r28
    14c8:	e5 5a       	subi	r30, 0xA5	; 165
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	60 81       	ld	r22, Z
    14ce:	71 81       	ldd	r23, Z+1	; 0x01
    14d0:	82 81       	ldd	r24, Z+2	; 0x02
    14d2:	93 81       	ldd	r25, Z+3	; 0x03
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e8       	ldi	r20, 0x80	; 128
    14da:	5f e3       	ldi	r21, 0x3F	; 63
    14dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e0:	88 23       	and	r24, r24
    14e2:	44 f4       	brge	.+16     	; 0x14f4 <LCD_sendCommand+0xb0>
		__ticks = 1;
    14e4:	fe 01       	movw	r30, r28
    14e6:	e7 5a       	subi	r30, 0xA7	; 167
    14e8:	ff 4f       	sbci	r31, 0xFF	; 255
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	80 83       	st	Z, r24
    14f2:	64 c0       	rjmp	.+200    	; 0x15bc <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
    14f4:	fe 01       	movw	r30, r28
    14f6:	e5 5a       	subi	r30, 0xA5	; 165
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	60 81       	ld	r22, Z
    14fc:	71 81       	ldd	r23, Z+1	; 0x01
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	93 81       	ldd	r25, Z+3	; 0x03
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	3f ef       	ldi	r19, 0xFF	; 255
    1506:	4f e7       	ldi	r20, 0x7F	; 127
    1508:	57 e4       	ldi	r21, 0x47	; 71
    150a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    150e:	18 16       	cp	r1, r24
    1510:	0c f0       	brlt	.+2      	; 0x1514 <LCD_sendCommand+0xd0>
    1512:	43 c0       	rjmp	.+134    	; 0x159a <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1514:	fe 01       	movw	r30, r28
    1516:	e1 5a       	subi	r30, 0xA1	; 161
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	60 81       	ld	r22, Z
    151c:	71 81       	ldd	r23, Z+1	; 0x01
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	20 e0       	ldi	r18, 0x00	; 0
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	40 e2       	ldi	r20, 0x20	; 32
    1528:	51 e4       	ldi	r21, 0x41	; 65
    152a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	8e 01       	movw	r16, r28
    1534:	07 5a       	subi	r16, 0xA7	; 167
    1536:	1f 4f       	sbci	r17, 0xFF	; 255
    1538:	bc 01       	movw	r22, r24
    153a:	cd 01       	movw	r24, r26
    153c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1540:	dc 01       	movw	r26, r24
    1542:	cb 01       	movw	r24, r22
    1544:	f8 01       	movw	r30, r16
    1546:	91 83       	std	Z+1, r25	; 0x01
    1548:	80 83       	st	Z, r24
    154a:	1f c0       	rjmp	.+62     	; 0x158a <LCD_sendCommand+0x146>
    154c:	fe 01       	movw	r30, r28
    154e:	e9 5a       	subi	r30, 0xA9	; 169
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	89 e1       	ldi	r24, 0x19	; 25
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	91 83       	std	Z+1, r25	; 0x01
    1558:	80 83       	st	Z, r24
    155a:	fe 01       	movw	r30, r28
    155c:	e9 5a       	subi	r30, 0xA9	; 169
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	80 81       	ld	r24, Z
    1562:	91 81       	ldd	r25, Z+1	; 0x01
    1564:	01 97       	sbiw	r24, 0x01	; 1
    1566:	f1 f7       	brne	.-4      	; 0x1564 <LCD_sendCommand+0x120>
    1568:	fe 01       	movw	r30, r28
    156a:	e9 5a       	subi	r30, 0xA9	; 169
    156c:	ff 4f       	sbci	r31, 0xFF	; 255
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1572:	de 01       	movw	r26, r28
    1574:	a7 5a       	subi	r26, 0xA7	; 167
    1576:	bf 4f       	sbci	r27, 0xFF	; 255
    1578:	fe 01       	movw	r30, r28
    157a:	e7 5a       	subi	r30, 0xA7	; 167
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	11 96       	adiw	r26, 0x01	; 1
    1586:	9c 93       	st	X, r25
    1588:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    158a:	fe 01       	movw	r30, r28
    158c:	e7 5a       	subi	r30, 0xA7	; 167
    158e:	ff 4f       	sbci	r31, 0xFF	; 255
    1590:	80 81       	ld	r24, Z
    1592:	91 81       	ldd	r25, Z+1	; 0x01
    1594:	00 97       	sbiw	r24, 0x00	; 0
    1596:	d1 f6       	brne	.-76     	; 0x154c <LCD_sendCommand+0x108>
    1598:	27 c0       	rjmp	.+78     	; 0x15e8 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    159a:	8e 01       	movw	r16, r28
    159c:	07 5a       	subi	r16, 0xA7	; 167
    159e:	1f 4f       	sbci	r17, 0xFF	; 255
    15a0:	fe 01       	movw	r30, r28
    15a2:	e5 5a       	subi	r30, 0xA5	; 165
    15a4:	ff 4f       	sbci	r31, 0xFF	; 255
    15a6:	60 81       	ld	r22, Z
    15a8:	71 81       	ldd	r23, Z+1	; 0x01
    15aa:	82 81       	ldd	r24, Z+2	; 0x02
    15ac:	93 81       	ldd	r25, Z+3	; 0x03
    15ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	f8 01       	movw	r30, r16
    15b8:	91 83       	std	Z+1, r25	; 0x01
    15ba:	80 83       	st	Z, r24
    15bc:	de 01       	movw	r26, r28
    15be:	ab 5a       	subi	r26, 0xAB	; 171
    15c0:	bf 4f       	sbci	r27, 0xFF	; 255
    15c2:	fe 01       	movw	r30, r28
    15c4:	e7 5a       	subi	r30, 0xA7	; 167
    15c6:	ff 4f       	sbci	r31, 0xFF	; 255
    15c8:	80 81       	ld	r24, Z
    15ca:	91 81       	ldd	r25, Z+1	; 0x01
    15cc:	8d 93       	st	X+, r24
    15ce:	9c 93       	st	X, r25
    15d0:	fe 01       	movw	r30, r28
    15d2:	eb 5a       	subi	r30, 0xAB	; 171
    15d4:	ff 4f       	sbci	r31, 0xFF	; 255
    15d6:	80 81       	ld	r24, Z
    15d8:	91 81       	ldd	r25, Z+1	; 0x01
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <LCD_sendCommand+0x196>
    15de:	fe 01       	movw	r30, r28
    15e0:	eb 5a       	subi	r30, 0xAB	; 171
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	91 83       	std	Z+1, r25	; 0x01
    15e6:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    15e8:	a8 e3       	ldi	r26, 0x38	; 56
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e8 e3       	ldi	r30, 0x38	; 56
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	88 60       	ori	r24, 0x08	; 8
    15f4:	8c 93       	st	X, r24
    15f6:	fe 01       	movw	r30, r28
    15f8:	ef 5a       	subi	r30, 0xAF	; 175
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a0 e8       	ldi	r26, 0x80	; 128
    1602:	bf e3       	ldi	r27, 0x3F	; 63
    1604:	80 83       	st	Z, r24
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	a2 83       	std	Z+2, r26	; 0x02
    160a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160c:	8e 01       	movw	r16, r28
    160e:	03 5b       	subi	r16, 0xB3	; 179
    1610:	1f 4f       	sbci	r17, 0xFF	; 255
    1612:	fe 01       	movw	r30, r28
    1614:	ef 5a       	subi	r30, 0xAF	; 175
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	4a e7       	ldi	r20, 0x7A	; 122
    1626:	53 e4       	ldi	r21, 0x43	; 67
    1628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	f8 01       	movw	r30, r16
    1632:	80 83       	st	Z, r24
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	a2 83       	std	Z+2, r26	; 0x02
    1638:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    163a:	fe 01       	movw	r30, r28
    163c:	e3 5b       	subi	r30, 0xB3	; 179
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e8       	ldi	r20, 0x80	; 128
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1654:	88 23       	and	r24, r24
    1656:	44 f4       	brge	.+16     	; 0x1668 <LCD_sendCommand+0x224>
		__ticks = 1;
    1658:	fe 01       	movw	r30, r28
    165a:	e5 5b       	subi	r30, 0xB5	; 181
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	80 83       	st	Z, r24
    1666:	64 c0       	rjmp	.+200    	; 0x1730 <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1668:	fe 01       	movw	r30, r28
    166a:	e3 5b       	subi	r30, 0xB3	; 179
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	60 81       	ld	r22, Z
    1670:	71 81       	ldd	r23, Z+1	; 0x01
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	3f ef       	ldi	r19, 0xFF	; 255
    167a:	4f e7       	ldi	r20, 0x7F	; 127
    167c:	57 e4       	ldi	r21, 0x47	; 71
    167e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1682:	18 16       	cp	r1, r24
    1684:	0c f0       	brlt	.+2      	; 0x1688 <LCD_sendCommand+0x244>
    1686:	43 c0       	rjmp	.+134    	; 0x170e <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1688:	fe 01       	movw	r30, r28
    168a:	ef 5a       	subi	r30, 0xAF	; 175
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e2       	ldi	r20, 0x20	; 32
    169c:	51 e4       	ldi	r21, 0x41	; 65
    169e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	8e 01       	movw	r16, r28
    16a8:	05 5b       	subi	r16, 0xB5	; 181
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	bc 01       	movw	r22, r24
    16ae:	cd 01       	movw	r24, r26
    16b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	f8 01       	movw	r30, r16
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	80 83       	st	Z, r24
    16be:	1f c0       	rjmp	.+62     	; 0x16fe <LCD_sendCommand+0x2ba>
    16c0:	fe 01       	movw	r30, r28
    16c2:	e7 5b       	subi	r30, 0xB7	; 183
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	89 e1       	ldi	r24, 0x19	; 25
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	80 83       	st	Z, r24
    16ce:	fe 01       	movw	r30, r28
    16d0:	e7 5b       	subi	r30, 0xB7	; 183
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <LCD_sendCommand+0x294>
    16dc:	fe 01       	movw	r30, r28
    16de:	e7 5b       	subi	r30, 0xB7	; 183
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	91 83       	std	Z+1, r25	; 0x01
    16e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e6:	de 01       	movw	r26, r28
    16e8:	a5 5b       	subi	r26, 0xB5	; 181
    16ea:	bf 4f       	sbci	r27, 0xFF	; 255
    16ec:	fe 01       	movw	r30, r28
    16ee:	e5 5b       	subi	r30, 0xB5	; 181
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	11 96       	adiw	r26, 0x01	; 1
    16fa:	9c 93       	st	X, r25
    16fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fe:	fe 01       	movw	r30, r28
    1700:	e5 5b       	subi	r30, 0xB5	; 181
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	80 81       	ld	r24, Z
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	d1 f6       	brne	.-76     	; 0x16c0 <LCD_sendCommand+0x27c>
    170c:	27 c0       	rjmp	.+78     	; 0x175c <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170e:	8e 01       	movw	r16, r28
    1710:	05 5b       	subi	r16, 0xB5	; 181
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
    1714:	fe 01       	movw	r30, r28
    1716:	e3 5b       	subi	r30, 0xB3	; 179
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	60 81       	ld	r22, Z
    171c:	71 81       	ldd	r23, Z+1	; 0x01
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	f8 01       	movw	r30, r16
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
    1730:	de 01       	movw	r26, r28
    1732:	a9 5b       	subi	r26, 0xB9	; 185
    1734:	bf 4f       	sbci	r27, 0xFF	; 255
    1736:	fe 01       	movw	r30, r28
    1738:	e5 5b       	subi	r30, 0xB5	; 181
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	8d 93       	st	X+, r24
    1742:	9c 93       	st	X, r25
    1744:	fe 01       	movw	r30, r28
    1746:	e9 5b       	subi	r30, 0xB9	; 185
    1748:	ff 4f       	sbci	r31, 0xFF	; 255
    174a:	80 81       	ld	r24, Z
    174c:	91 81       	ldd	r25, Z+1	; 0x01
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <LCD_sendCommand+0x30a>
    1752:	fe 01       	movw	r30, r28
    1754:	e9 5b       	subi	r30, 0xB9	; 185
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
    175c:	a2 e3       	ldi	r26, 0x32	; 50
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e2 e3       	ldi	r30, 0x32	; 50
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	98 2f       	mov	r25, r24
    1768:	90 7f       	andi	r25, 0xF0	; 240
    176a:	fe 01       	movw	r30, r28
    176c:	ed 59       	subi	r30, 0x9D	; 157
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	80 81       	ld	r24, Z
    1772:	82 95       	swap	r24
    1774:	8f 70       	andi	r24, 0x0F	; 15
    1776:	89 2b       	or	r24, r25
    1778:	8c 93       	st	X, r24
    177a:	fe 01       	movw	r30, r28
    177c:	ed 5b       	subi	r30, 0xBD	; 189
    177e:	ff 4f       	sbci	r31, 0xFF	; 255
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	a0 e8       	ldi	r26, 0x80	; 128
    1786:	bf e3       	ldi	r27, 0x3F	; 63
    1788:	80 83       	st	Z, r24
    178a:	91 83       	std	Z+1, r25	; 0x01
    178c:	a2 83       	std	Z+2, r26	; 0x02
    178e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1790:	8e 01       	movw	r16, r28
    1792:	01 5c       	subi	r16, 0xC1	; 193
    1794:	1f 4f       	sbci	r17, 0xFF	; 255
    1796:	fe 01       	movw	r30, r28
    1798:	ed 5b       	subi	r30, 0xBD	; 189
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	60 81       	ld	r22, Z
    179e:	71 81       	ldd	r23, Z+1	; 0x01
    17a0:	82 81       	ldd	r24, Z+2	; 0x02
    17a2:	93 81       	ldd	r25, Z+3	; 0x03
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	4a e7       	ldi	r20, 0x7A	; 122
    17aa:	53 e4       	ldi	r21, 0x43	; 67
    17ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	f8 01       	movw	r30, r16
    17b6:	80 83       	st	Z, r24
    17b8:	91 83       	std	Z+1, r25	; 0x01
    17ba:	a2 83       	std	Z+2, r26	; 0x02
    17bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17be:	fe 01       	movw	r30, r28
    17c0:	ff 96       	adiw	r30, 0x3f	; 63
    17c2:	60 81       	ld	r22, Z
    17c4:	71 81       	ldd	r23, Z+1	; 0x01
    17c6:	82 81       	ldd	r24, Z+2	; 0x02
    17c8:	93 81       	ldd	r25, Z+3	; 0x03
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e8       	ldi	r20, 0x80	; 128
    17d0:	5f e3       	ldi	r21, 0x3F	; 63
    17d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d6:	88 23       	and	r24, r24
    17d8:	2c f4       	brge	.+10     	; 0x17e4 <LCD_sendCommand+0x3a0>
		__ticks = 1;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	9e af       	std	Y+62, r25	; 0x3e
    17e0:	8d af       	std	Y+61, r24	; 0x3d
    17e2:	46 c0       	rjmp	.+140    	; 0x1870 <LCD_sendCommand+0x42c>
	else if (__tmp > 65535)
    17e4:	fe 01       	movw	r30, r28
    17e6:	ff 96       	adiw	r30, 0x3f	; 63
    17e8:	60 81       	ld	r22, Z
    17ea:	71 81       	ldd	r23, Z+1	; 0x01
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	93 81       	ldd	r25, Z+3	; 0x03
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	3f ef       	ldi	r19, 0xFF	; 255
    17f4:	4f e7       	ldi	r20, 0x7F	; 127
    17f6:	57 e4       	ldi	r21, 0x47	; 71
    17f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17fc:	18 16       	cp	r1, r24
    17fe:	64 f5       	brge	.+88     	; 0x1858 <LCD_sendCommand+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1800:	fe 01       	movw	r30, r28
    1802:	ed 5b       	subi	r30, 0xBD	; 189
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	60 81       	ld	r22, Z
    1808:	71 81       	ldd	r23, Z+1	; 0x01
    180a:	82 81       	ldd	r24, Z+2	; 0x02
    180c:	93 81       	ldd	r25, Z+3	; 0x03
    180e:	20 e0       	ldi	r18, 0x00	; 0
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	40 e2       	ldi	r20, 0x20	; 32
    1814:	51 e4       	ldi	r21, 0x41	; 65
    1816:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	bc 01       	movw	r22, r24
    1820:	cd 01       	movw	r24, r26
    1822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	9e af       	std	Y+62, r25	; 0x3e
    182c:	8d af       	std	Y+61, r24	; 0x3d
    182e:	0f c0       	rjmp	.+30     	; 0x184e <LCD_sendCommand+0x40a>
    1830:	89 e1       	ldi	r24, 0x19	; 25
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	9c af       	std	Y+60, r25	; 0x3c
    1836:	8b af       	std	Y+59, r24	; 0x3b
    1838:	8b ad       	ldd	r24, Y+59	; 0x3b
    183a:	9c ad       	ldd	r25, Y+60	; 0x3c
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	f1 f7       	brne	.-4      	; 0x183c <LCD_sendCommand+0x3f8>
    1840:	9c af       	std	Y+60, r25	; 0x3c
    1842:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1844:	8d ad       	ldd	r24, Y+61	; 0x3d
    1846:	9e ad       	ldd	r25, Y+62	; 0x3e
    1848:	01 97       	sbiw	r24, 0x01	; 1
    184a:	9e af       	std	Y+62, r25	; 0x3e
    184c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1850:	9e ad       	ldd	r25, Y+62	; 0x3e
    1852:	00 97       	sbiw	r24, 0x00	; 0
    1854:	69 f7       	brne	.-38     	; 0x1830 <LCD_sendCommand+0x3ec>
    1856:	16 c0       	rjmp	.+44     	; 0x1884 <LCD_sendCommand+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1858:	fe 01       	movw	r30, r28
    185a:	ff 96       	adiw	r30, 0x3f	; 63
    185c:	60 81       	ld	r22, Z
    185e:	71 81       	ldd	r23, Z+1	; 0x01
    1860:	82 81       	ldd	r24, Z+2	; 0x02
    1862:	93 81       	ldd	r25, Z+3	; 0x03
    1864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	9e af       	std	Y+62, r25	; 0x3e
    186e:	8d af       	std	Y+61, r24	; 0x3d
    1870:	8d ad       	ldd	r24, Y+61	; 0x3d
    1872:	9e ad       	ldd	r25, Y+62	; 0x3e
    1874:	9a af       	std	Y+58, r25	; 0x3a
    1876:	89 af       	std	Y+57, r24	; 0x39
    1878:	89 ad       	ldd	r24, Y+57	; 0x39
    187a:	9a ad       	ldd	r25, Y+58	; 0x3a
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <LCD_sendCommand+0x438>
    1880:	9a af       	std	Y+58, r25	; 0x3a
    1882:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1884:	a8 e3       	ldi	r26, 0x38	; 56
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e8 e3       	ldi	r30, 0x38	; 56
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	87 7f       	andi	r24, 0xF7	; 247
    1890:	8c 93       	st	X, r24
    1892:	80 e0       	ldi	r24, 0x00	; 0
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	a0 e8       	ldi	r26, 0x80	; 128
    1898:	bf e3       	ldi	r27, 0x3F	; 63
    189a:	8d ab       	std	Y+53, r24	; 0x35
    189c:	9e ab       	std	Y+54, r25	; 0x36
    189e:	af ab       	std	Y+55, r26	; 0x37
    18a0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a2:	6d a9       	ldd	r22, Y+53	; 0x35
    18a4:	7e a9       	ldd	r23, Y+54	; 0x36
    18a6:	8f a9       	ldd	r24, Y+55	; 0x37
    18a8:	98 ad       	ldd	r25, Y+56	; 0x38
    18aa:	20 e0       	ldi	r18, 0x00	; 0
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	4a e7       	ldi	r20, 0x7A	; 122
    18b0:	53 e4       	ldi	r21, 0x43	; 67
    18b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b6:	dc 01       	movw	r26, r24
    18b8:	cb 01       	movw	r24, r22
    18ba:	89 ab       	std	Y+49, r24	; 0x31
    18bc:	9a ab       	std	Y+50, r25	; 0x32
    18be:	ab ab       	std	Y+51, r26	; 0x33
    18c0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18c2:	69 a9       	ldd	r22, Y+49	; 0x31
    18c4:	7a a9       	ldd	r23, Y+50	; 0x32
    18c6:	8b a9       	ldd	r24, Y+51	; 0x33
    18c8:	9c a9       	ldd	r25, Y+52	; 0x34
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	40 e8       	ldi	r20, 0x80	; 128
    18d0:	5f e3       	ldi	r21, 0x3F	; 63
    18d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18d6:	88 23       	and	r24, r24
    18d8:	2c f4       	brge	.+10     	; 0x18e4 <LCD_sendCommand+0x4a0>
		__ticks = 1;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	98 ab       	std	Y+48, r25	; 0x30
    18e0:	8f a7       	std	Y+47, r24	; 0x2f
    18e2:	3f c0       	rjmp	.+126    	; 0x1962 <LCD_sendCommand+0x51e>
	else if (__tmp > 65535)
    18e4:	69 a9       	ldd	r22, Y+49	; 0x31
    18e6:	7a a9       	ldd	r23, Y+50	; 0x32
    18e8:	8b a9       	ldd	r24, Y+51	; 0x33
    18ea:	9c a9       	ldd	r25, Y+52	; 0x34
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	3f ef       	ldi	r19, 0xFF	; 255
    18f0:	4f e7       	ldi	r20, 0x7F	; 127
    18f2:	57 e4       	ldi	r21, 0x47	; 71
    18f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18f8:	18 16       	cp	r1, r24
    18fa:	4c f5       	brge	.+82     	; 0x194e <LCD_sendCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18fc:	6d a9       	ldd	r22, Y+53	; 0x35
    18fe:	7e a9       	ldd	r23, Y+54	; 0x36
    1900:	8f a9       	ldd	r24, Y+55	; 0x37
    1902:	98 ad       	ldd	r25, Y+56	; 0x38
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e2       	ldi	r20, 0x20	; 32
    190a:	51 e4       	ldi	r21, 0x41	; 65
    190c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1910:	dc 01       	movw	r26, r24
    1912:	cb 01       	movw	r24, r22
    1914:	bc 01       	movw	r22, r24
    1916:	cd 01       	movw	r24, r26
    1918:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    191c:	dc 01       	movw	r26, r24
    191e:	cb 01       	movw	r24, r22
    1920:	98 ab       	std	Y+48, r25	; 0x30
    1922:	8f a7       	std	Y+47, r24	; 0x2f
    1924:	0f c0       	rjmp	.+30     	; 0x1944 <LCD_sendCommand+0x500>
    1926:	89 e1       	ldi	r24, 0x19	; 25
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	9e a7       	std	Y+46, r25	; 0x2e
    192c:	8d a7       	std	Y+45, r24	; 0x2d
    192e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1930:	9e a5       	ldd	r25, Y+46	; 0x2e
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	f1 f7       	brne	.-4      	; 0x1932 <LCD_sendCommand+0x4ee>
    1936:	9e a7       	std	Y+46, r25	; 0x2e
    1938:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    193a:	8f a5       	ldd	r24, Y+47	; 0x2f
    193c:	98 a9       	ldd	r25, Y+48	; 0x30
    193e:	01 97       	sbiw	r24, 0x01	; 1
    1940:	98 ab       	std	Y+48, r25	; 0x30
    1942:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1944:	8f a5       	ldd	r24, Y+47	; 0x2f
    1946:	98 a9       	ldd	r25, Y+48	; 0x30
    1948:	00 97       	sbiw	r24, 0x00	; 0
    194a:	69 f7       	brne	.-38     	; 0x1926 <LCD_sendCommand+0x4e2>
    194c:	14 c0       	rjmp	.+40     	; 0x1976 <LCD_sendCommand+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194e:	69 a9       	ldd	r22, Y+49	; 0x31
    1950:	7a a9       	ldd	r23, Y+50	; 0x32
    1952:	8b a9       	ldd	r24, Y+51	; 0x33
    1954:	9c a9       	ldd	r25, Y+52	; 0x34
    1956:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	98 ab       	std	Y+48, r25	; 0x30
    1960:	8f a7       	std	Y+47, r24	; 0x2f
    1962:	8f a5       	ldd	r24, Y+47	; 0x2f
    1964:	98 a9       	ldd	r25, Y+48	; 0x30
    1966:	9c a7       	std	Y+44, r25	; 0x2c
    1968:	8b a7       	std	Y+43, r24	; 0x2b
    196a:	8b a5       	ldd	r24, Y+43	; 0x2b
    196c:	9c a5       	ldd	r25, Y+44	; 0x2c
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	f1 f7       	brne	.-4      	; 0x196e <LCD_sendCommand+0x52a>
    1972:	9c a7       	std	Y+44, r25	; 0x2c
    1974:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1976:	a8 e3       	ldi	r26, 0x38	; 56
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e8 e3       	ldi	r30, 0x38	; 56
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	88 60       	ori	r24, 0x08	; 8
    1982:	8c 93       	st	X, r24
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	a0 e8       	ldi	r26, 0x80	; 128
    198a:	bf e3       	ldi	r27, 0x3F	; 63
    198c:	8f a3       	std	Y+39, r24	; 0x27
    198e:	98 a7       	std	Y+40, r25	; 0x28
    1990:	a9 a7       	std	Y+41, r26	; 0x29
    1992:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1994:	6f a1       	ldd	r22, Y+39	; 0x27
    1996:	78 a5       	ldd	r23, Y+40	; 0x28
    1998:	89 a5       	ldd	r24, Y+41	; 0x29
    199a:	9a a5       	ldd	r25, Y+42	; 0x2a
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	4a e7       	ldi	r20, 0x7A	; 122
    19a2:	53 e4       	ldi	r21, 0x43	; 67
    19a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	8b a3       	std	Y+35, r24	; 0x23
    19ae:	9c a3       	std	Y+36, r25	; 0x24
    19b0:	ad a3       	std	Y+37, r26	; 0x25
    19b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19b4:	6b a1       	ldd	r22, Y+35	; 0x23
    19b6:	7c a1       	ldd	r23, Y+36	; 0x24
    19b8:	8d a1       	ldd	r24, Y+37	; 0x25
    19ba:	9e a1       	ldd	r25, Y+38	; 0x26
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e8       	ldi	r20, 0x80	; 128
    19c2:	5f e3       	ldi	r21, 0x3F	; 63
    19c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c8:	88 23       	and	r24, r24
    19ca:	2c f4       	brge	.+10     	; 0x19d6 <LCD_sendCommand+0x592>
		__ticks = 1;
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	9a a3       	std	Y+34, r25	; 0x22
    19d2:	89 a3       	std	Y+33, r24	; 0x21
    19d4:	3f c0       	rjmp	.+126    	; 0x1a54 <LCD_sendCommand+0x610>
	else if (__tmp > 65535)
    19d6:	6b a1       	ldd	r22, Y+35	; 0x23
    19d8:	7c a1       	ldd	r23, Y+36	; 0x24
    19da:	8d a1       	ldd	r24, Y+37	; 0x25
    19dc:	9e a1       	ldd	r25, Y+38	; 0x26
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	3f ef       	ldi	r19, 0xFF	; 255
    19e2:	4f e7       	ldi	r20, 0x7F	; 127
    19e4:	57 e4       	ldi	r21, 0x47	; 71
    19e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19ea:	18 16       	cp	r1, r24
    19ec:	4c f5       	brge	.+82     	; 0x1a40 <LCD_sendCommand+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ee:	6f a1       	ldd	r22, Y+39	; 0x27
    19f0:	78 a5       	ldd	r23, Y+40	; 0x28
    19f2:	89 a5       	ldd	r24, Y+41	; 0x29
    19f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    19f6:	20 e0       	ldi	r18, 0x00	; 0
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	40 e2       	ldi	r20, 0x20	; 32
    19fc:	51 e4       	ldi	r21, 0x41	; 65
    19fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a02:	dc 01       	movw	r26, r24
    1a04:	cb 01       	movw	r24, r22
    1a06:	bc 01       	movw	r22, r24
    1a08:	cd 01       	movw	r24, r26
    1a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	9a a3       	std	Y+34, r25	; 0x22
    1a14:	89 a3       	std	Y+33, r24	; 0x21
    1a16:	0f c0       	rjmp	.+30     	; 0x1a36 <LCD_sendCommand+0x5f2>
    1a18:	89 e1       	ldi	r24, 0x19	; 25
    1a1a:	90 e0       	ldi	r25, 0x00	; 0
    1a1c:	98 a3       	std	Y+32, r25	; 0x20
    1a1e:	8f 8f       	std	Y+31, r24	; 0x1f
    1a20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a22:	98 a1       	ldd	r25, Y+32	; 0x20
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <LCD_sendCommand+0x5e0>
    1a28:	98 a3       	std	Y+32, r25	; 0x20
    1a2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1a2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	9a a3       	std	Y+34, r25	; 0x22
    1a34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a36:	89 a1       	ldd	r24, Y+33	; 0x21
    1a38:	9a a1       	ldd	r25, Y+34	; 0x22
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	69 f7       	brne	.-38     	; 0x1a18 <LCD_sendCommand+0x5d4>
    1a3e:	14 c0       	rjmp	.+40     	; 0x1a68 <LCD_sendCommand+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a40:	6b a1       	ldd	r22, Y+35	; 0x23
    1a42:	7c a1       	ldd	r23, Y+36	; 0x24
    1a44:	8d a1       	ldd	r24, Y+37	; 0x25
    1a46:	9e a1       	ldd	r25, Y+38	; 0x26
    1a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4c:	dc 01       	movw	r26, r24
    1a4e:	cb 01       	movw	r24, r22
    1a50:	9a a3       	std	Y+34, r25	; 0x22
    1a52:	89 a3       	std	Y+33, r24	; 0x21
    1a54:	89 a1       	ldd	r24, Y+33	; 0x21
    1a56:	9a a1       	ldd	r25, Y+34	; 0x22
    1a58:	9e 8f       	std	Y+30, r25	; 0x1e
    1a5a:	8d 8f       	std	Y+29, r24	; 0x1d
    1a5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <LCD_sendCommand+0x61c>
    1a64:	9e 8f       	std	Y+30, r25	; 0x1e
    1a66:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
    1a68:	a2 e3       	ldi	r26, 0x32	; 50
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e2 e3       	ldi	r30, 0x32	; 50
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	98 2f       	mov	r25, r24
    1a74:	90 7f       	andi	r25, 0xF0	; 240
    1a76:	fe 01       	movw	r30, r28
    1a78:	ed 59       	subi	r30, 0x9D	; 157
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 81       	ld	r24, Z
    1a7e:	8f 70       	andi	r24, 0x0F	; 15
    1a80:	89 2b       	or	r24, r25
    1a82:	8c 93       	st	X, r24
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	a0 e8       	ldi	r26, 0x80	; 128
    1a8a:	bf e3       	ldi	r27, 0x3F	; 63
    1a8c:	89 8f       	std	Y+25, r24	; 0x19
    1a8e:	9a 8f       	std	Y+26, r25	; 0x1a
    1a90:	ab 8f       	std	Y+27, r26	; 0x1b
    1a92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a94:	69 8d       	ldd	r22, Y+25	; 0x19
    1a96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	4a e7       	ldi	r20, 0x7A	; 122
    1aa2:	53 e4       	ldi	r21, 0x43	; 67
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	8d 8b       	std	Y+21, r24	; 0x15
    1aae:	9e 8b       	std	Y+22, r25	; 0x16
    1ab0:	af 8b       	std	Y+23, r26	; 0x17
    1ab2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ab4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aba:	98 8d       	ldd	r25, Y+24	; 0x18
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	40 e8       	ldi	r20, 0x80	; 128
    1ac2:	5f e3       	ldi	r21, 0x3F	; 63
    1ac4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ac8:	88 23       	and	r24, r24
    1aca:	2c f4       	brge	.+10     	; 0x1ad6 <LCD_sendCommand+0x692>
		__ticks = 1;
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	9c 8b       	std	Y+20, r25	; 0x14
    1ad2:	8b 8b       	std	Y+19, r24	; 0x13
    1ad4:	3f c0       	rjmp	.+126    	; 0x1b54 <LCD_sendCommand+0x710>
	else if (__tmp > 65535)
    1ad6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad8:	7e 89       	ldd	r23, Y+22	; 0x16
    1ada:	8f 89       	ldd	r24, Y+23	; 0x17
    1adc:	98 8d       	ldd	r25, Y+24	; 0x18
    1ade:	20 e0       	ldi	r18, 0x00	; 0
    1ae0:	3f ef       	ldi	r19, 0xFF	; 255
    1ae2:	4f e7       	ldi	r20, 0x7F	; 127
    1ae4:	57 e4       	ldi	r21, 0x47	; 71
    1ae6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aea:	18 16       	cp	r1, r24
    1aec:	4c f5       	brge	.+82     	; 0x1b40 <LCD_sendCommand+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aee:	69 8d       	ldd	r22, Y+25	; 0x19
    1af0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af6:	20 e0       	ldi	r18, 0x00	; 0
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	40 e2       	ldi	r20, 0x20	; 32
    1afc:	51 e4       	ldi	r21, 0x41	; 65
    1afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	bc 01       	movw	r22, r24
    1b08:	cd 01       	movw	r24, r26
    1b0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	9c 8b       	std	Y+20, r25	; 0x14
    1b14:	8b 8b       	std	Y+19, r24	; 0x13
    1b16:	0f c0       	rjmp	.+30     	; 0x1b36 <LCD_sendCommand+0x6f2>
    1b18:	89 e1       	ldi	r24, 0x19	; 25
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	9a 8b       	std	Y+18, r25	; 0x12
    1b1e:	89 8b       	std	Y+17, r24	; 0x11
    1b20:	89 89       	ldd	r24, Y+17	; 0x11
    1b22:	9a 89       	ldd	r25, Y+18	; 0x12
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	f1 f7       	brne	.-4      	; 0x1b24 <LCD_sendCommand+0x6e0>
    1b28:	9a 8b       	std	Y+18, r25	; 0x12
    1b2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1b2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	9c 8b       	std	Y+20, r25	; 0x14
    1b34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b36:	8b 89       	ldd	r24, Y+19	; 0x13
    1b38:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3a:	00 97       	sbiw	r24, 0x00	; 0
    1b3c:	69 f7       	brne	.-38     	; 0x1b18 <LCD_sendCommand+0x6d4>
    1b3e:	14 c0       	rjmp	.+40     	; 0x1b68 <LCD_sendCommand+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b40:	6d 89       	ldd	r22, Y+21	; 0x15
    1b42:	7e 89       	ldd	r23, Y+22	; 0x16
    1b44:	8f 89       	ldd	r24, Y+23	; 0x17
    1b46:	98 8d       	ldd	r25, Y+24	; 0x18
    1b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	9c 8b       	std	Y+20, r25	; 0x14
    1b52:	8b 8b       	std	Y+19, r24	; 0x13
    1b54:	8b 89       	ldd	r24, Y+19	; 0x13
    1b56:	9c 89       	ldd	r25, Y+20	; 0x14
    1b58:	98 8b       	std	Y+16, r25	; 0x10
    1b5a:	8f 87       	std	Y+15, r24	; 0x0f
    1b5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b5e:	98 89       	ldd	r25, Y+16	; 0x10
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <LCD_sendCommand+0x71c>
    1b64:	98 8b       	std	Y+16, r25	; 0x10
    1b66:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1b68:	a8 e3       	ldi	r26, 0x38	; 56
    1b6a:	b0 e0       	ldi	r27, 0x00	; 0
    1b6c:	e8 e3       	ldi	r30, 0x38	; 56
    1b6e:	f0 e0       	ldi	r31, 0x00	; 0
    1b70:	80 81       	ld	r24, Z
    1b72:	87 7f       	andi	r24, 0xF7	; 247
    1b74:	8c 93       	st	X, r24
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	a0 e8       	ldi	r26, 0x80	; 128
    1b7c:	bf e3       	ldi	r27, 0x3F	; 63
    1b7e:	8b 87       	std	Y+11, r24	; 0x0b
    1b80:	9c 87       	std	Y+12, r25	; 0x0c
    1b82:	ad 87       	std	Y+13, r26	; 0x0d
    1b84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	4a e7       	ldi	r20, 0x7A	; 122
    1b94:	53 e4       	ldi	r21, 0x43	; 67
    1b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	8f 83       	std	Y+7, r24	; 0x07
    1ba0:	98 87       	std	Y+8, r25	; 0x08
    1ba2:	a9 87       	std	Y+9, r26	; 0x09
    1ba4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba8:	78 85       	ldd	r23, Y+8	; 0x08
    1baa:	89 85       	ldd	r24, Y+9	; 0x09
    1bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	40 e8       	ldi	r20, 0x80	; 128
    1bb4:	5f e3       	ldi	r21, 0x3F	; 63
    1bb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bba:	88 23       	and	r24, r24
    1bbc:	2c f4       	brge	.+10     	; 0x1bc8 <LCD_sendCommand+0x784>
		__ticks = 1;
    1bbe:	81 e0       	ldi	r24, 0x01	; 1
    1bc0:	90 e0       	ldi	r25, 0x00	; 0
    1bc2:	9e 83       	std	Y+6, r25	; 0x06
    1bc4:	8d 83       	std	Y+5, r24	; 0x05
    1bc6:	3f c0       	rjmp	.+126    	; 0x1c46 <LCD_sendCommand+0x802>
	else if (__tmp > 65535)
    1bc8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bca:	78 85       	ldd	r23, Y+8	; 0x08
    1bcc:	89 85       	ldd	r24, Y+9	; 0x09
    1bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	3f ef       	ldi	r19, 0xFF	; 255
    1bd4:	4f e7       	ldi	r20, 0x7F	; 127
    1bd6:	57 e4       	ldi	r21, 0x47	; 71
    1bd8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bdc:	18 16       	cp	r1, r24
    1bde:	4c f5       	brge	.+82     	; 0x1c32 <LCD_sendCommand+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1be2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1be4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be8:	20 e0       	ldi	r18, 0x00	; 0
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	40 e2       	ldi	r20, 0x20	; 32
    1bee:	51 e4       	ldi	r21, 0x41	; 65
    1bf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	bc 01       	movw	r22, r24
    1bfa:	cd 01       	movw	r24, r26
    1bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c00:	dc 01       	movw	r26, r24
    1c02:	cb 01       	movw	r24, r22
    1c04:	9e 83       	std	Y+6, r25	; 0x06
    1c06:	8d 83       	std	Y+5, r24	; 0x05
    1c08:	0f c0       	rjmp	.+30     	; 0x1c28 <LCD_sendCommand+0x7e4>
    1c0a:	89 e1       	ldi	r24, 0x19	; 25
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	9c 83       	std	Y+4, r25	; 0x04
    1c10:	8b 83       	std	Y+3, r24	; 0x03
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	9c 81       	ldd	r25, Y+4	; 0x04
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <LCD_sendCommand+0x7d2>
    1c1a:	9c 83       	std	Y+4, r25	; 0x04
    1c1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	9e 81       	ldd	r25, Y+6	; 0x06
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c28:	8d 81       	ldd	r24, Y+5	; 0x05
    1c2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c2c:	00 97       	sbiw	r24, 0x00	; 0
    1c2e:	69 f7       	brne	.-38     	; 0x1c0a <LCD_sendCommand+0x7c6>
    1c30:	14 c0       	rjmp	.+40     	; 0x1c5a <LCD_sendCommand+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c32:	6f 81       	ldd	r22, Y+7	; 0x07
    1c34:	78 85       	ldd	r23, Y+8	; 0x08
    1c36:	89 85       	ldd	r24, Y+9	; 0x09
    1c38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	9e 83       	std	Y+6, r25	; 0x06
    1c44:	8d 83       	std	Y+5, r24	; 0x05
    1c46:	8d 81       	ldd	r24, Y+5	; 0x05
    1c48:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4a:	9a 83       	std	Y+2, r25	; 0x02
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
    1c50:	9a 81       	ldd	r25, Y+2	; 0x02
    1c52:	01 97       	sbiw	r24, 0x01	; 1
    1c54:	f1 f7       	brne	.-4      	; 0x1c52 <LCD_sendCommand+0x80e>
    1c56:	9a 83       	std	Y+2, r25	; 0x02
    1c58:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1c5a:	cd 59       	subi	r28, 0x9D	; 157
    1c5c:	df 4f       	sbci	r29, 0xFF	; 255
    1c5e:	0f b6       	in	r0, 0x3f	; 63
    1c60:	f8 94       	cli
    1c62:	de bf       	out	0x3e, r29	; 62
    1c64:	0f be       	out	0x3f, r0	; 63
    1c66:	cd bf       	out	0x3d, r28	; 61
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	08 95       	ret

00001c72 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1c72:	0f 93       	push	r16
    1c74:	1f 93       	push	r17
    1c76:	df 93       	push	r29
    1c78:	cf 93       	push	r28
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	c3 56       	subi	r28, 0x63	; 99
    1c80:	d0 40       	sbci	r29, 0x00	; 0
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	f8 94       	cli
    1c86:	de bf       	out	0x3e, r29	; 62
    1c88:	0f be       	out	0x3f, r0	; 63
    1c8a:	cd bf       	out	0x3d, r28	; 61
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	ed 59       	subi	r30, 0x9D	; 157
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1c94:	a8 e3       	ldi	r26, 0x38	; 56
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e8 e3       	ldi	r30, 0x38	; 56
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	82 60       	ori	r24, 0x02	; 2
    1ca0:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1ca2:	a8 e3       	ldi	r26, 0x38	; 56
    1ca4:	b0 e0       	ldi	r27, 0x00	; 0
    1ca6:	e8 e3       	ldi	r30, 0x38	; 56
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	80 81       	ld	r24, Z
    1cac:	8b 7f       	andi	r24, 0xFB	; 251
    1cae:	8c 93       	st	X, r24
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e1 5a       	subi	r30, 0xA1	; 161
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a0 e8       	ldi	r26, 0x80	; 128
    1cbc:	bf e3       	ldi	r27, 0x3F	; 63
    1cbe:	80 83       	st	Z, r24
    1cc0:	91 83       	std	Z+1, r25	; 0x01
    1cc2:	a2 83       	std	Z+2, r26	; 0x02
    1cc4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cc6:	8e 01       	movw	r16, r28
    1cc8:	05 5a       	subi	r16, 0xA5	; 165
    1cca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e1 5a       	subi	r30, 0xA1	; 161
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	60 81       	ld	r22, Z
    1cd4:	71 81       	ldd	r23, Z+1	; 0x01
    1cd6:	82 81       	ldd	r24, Z+2	; 0x02
    1cd8:	93 81       	ldd	r25, Z+3	; 0x03
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	4a e7       	ldi	r20, 0x7A	; 122
    1ce0:	53 e4       	ldi	r21, 0x43	; 67
    1ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	f8 01       	movw	r30, r16
    1cec:	80 83       	st	Z, r24
    1cee:	91 83       	std	Z+1, r25	; 0x01
    1cf0:	a2 83       	std	Z+2, r26	; 0x02
    1cf2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cf4:	fe 01       	movw	r30, r28
    1cf6:	e5 5a       	subi	r30, 0xA5	; 165
    1cf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfa:	60 81       	ld	r22, Z
    1cfc:	71 81       	ldd	r23, Z+1	; 0x01
    1cfe:	82 81       	ldd	r24, Z+2	; 0x02
    1d00:	93 81       	ldd	r25, Z+3	; 0x03
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e8       	ldi	r20, 0x80	; 128
    1d08:	5f e3       	ldi	r21, 0x3F	; 63
    1d0a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d0e:	88 23       	and	r24, r24
    1d10:	44 f4       	brge	.+16     	; 0x1d22 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    1d12:	fe 01       	movw	r30, r28
    1d14:	e7 5a       	subi	r30, 0xA7	; 167
    1d16:	ff 4f       	sbci	r31, 0xFF	; 255
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	80 83       	st	Z, r24
    1d20:	64 c0       	rjmp	.+200    	; 0x1dea <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    1d22:	fe 01       	movw	r30, r28
    1d24:	e5 5a       	subi	r30, 0xA5	; 165
    1d26:	ff 4f       	sbci	r31, 0xFF	; 255
    1d28:	60 81       	ld	r22, Z
    1d2a:	71 81       	ldd	r23, Z+1	; 0x01
    1d2c:	82 81       	ldd	r24, Z+2	; 0x02
    1d2e:	93 81       	ldd	r25, Z+3	; 0x03
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	0c f0       	brlt	.+2      	; 0x1d42 <LCD_displayCharacter+0xd0>
    1d40:	43 c0       	rjmp	.+134    	; 0x1dc8 <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	fe 01       	movw	r30, r28
    1d44:	e1 5a       	subi	r30, 0xA1	; 161
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	8e 01       	movw	r16, r28
    1d62:	07 5a       	subi	r16, 0xA7	; 167
    1d64:	1f 4f       	sbci	r17, 0xFF	; 255
    1d66:	bc 01       	movw	r22, r24
    1d68:	cd 01       	movw	r24, r26
    1d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	f8 01       	movw	r30, r16
    1d74:	91 83       	std	Z+1, r25	; 0x01
    1d76:	80 83       	st	Z, r24
    1d78:	1f c0       	rjmp	.+62     	; 0x1db8 <LCD_displayCharacter+0x146>
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e9 5a       	subi	r30, 0xA9	; 169
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	89 e1       	ldi	r24, 0x19	; 25
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	91 83       	std	Z+1, r25	; 0x01
    1d86:	80 83       	st	Z, r24
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e9 5a       	subi	r30, 0xA9	; 169
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	80 81       	ld	r24, Z
    1d90:	91 81       	ldd	r25, Z+1	; 0x01
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	f1 f7       	brne	.-4      	; 0x1d92 <LCD_displayCharacter+0x120>
    1d96:	fe 01       	movw	r30, r28
    1d98:	e9 5a       	subi	r30, 0xA9	; 169
    1d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9c:	91 83       	std	Z+1, r25	; 0x01
    1d9e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1da0:	de 01       	movw	r26, r28
    1da2:	a7 5a       	subi	r26, 0xA7	; 167
    1da4:	bf 4f       	sbci	r27, 0xFF	; 255
    1da6:	fe 01       	movw	r30, r28
    1da8:	e7 5a       	subi	r30, 0xA7	; 167
    1daa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dac:	80 81       	ld	r24, Z
    1dae:	91 81       	ldd	r25, Z+1	; 0x01
    1db0:	01 97       	sbiw	r24, 0x01	; 1
    1db2:	11 96       	adiw	r26, 0x01	; 1
    1db4:	9c 93       	st	X, r25
    1db6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1db8:	fe 01       	movw	r30, r28
    1dba:	e7 5a       	subi	r30, 0xA7	; 167
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	80 81       	ld	r24, Z
    1dc0:	91 81       	ldd	r25, Z+1	; 0x01
    1dc2:	00 97       	sbiw	r24, 0x00	; 0
    1dc4:	d1 f6       	brne	.-76     	; 0x1d7a <LCD_displayCharacter+0x108>
    1dc6:	27 c0       	rjmp	.+78     	; 0x1e16 <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dc8:	8e 01       	movw	r16, r28
    1dca:	07 5a       	subi	r16, 0xA7	; 167
    1dcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e5 5a       	subi	r30, 0xA5	; 165
    1dd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd4:	60 81       	ld	r22, Z
    1dd6:	71 81       	ldd	r23, Z+1	; 0x01
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	f8 01       	movw	r30, r16
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	80 83       	st	Z, r24
    1dea:	de 01       	movw	r26, r28
    1dec:	ab 5a       	subi	r26, 0xAB	; 171
    1dee:	bf 4f       	sbci	r27, 0xFF	; 255
    1df0:	fe 01       	movw	r30, r28
    1df2:	e7 5a       	subi	r30, 0xA7	; 167
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	80 81       	ld	r24, Z
    1df8:	91 81       	ldd	r25, Z+1	; 0x01
    1dfa:	8d 93       	st	X+, r24
    1dfc:	9c 93       	st	X, r25
    1dfe:	fe 01       	movw	r30, r28
    1e00:	eb 5a       	subi	r30, 0xAB	; 171
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	80 81       	ld	r24, Z
    1e06:	91 81       	ldd	r25, Z+1	; 0x01
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_displayCharacter+0x196>
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	eb 5a       	subi	r30, 0xAB	; 171
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	91 83       	std	Z+1, r25	; 0x01
    1e14:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1e16:	a8 e3       	ldi	r26, 0x38	; 56
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	e8 e3       	ldi	r30, 0x38	; 56
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	88 60       	ori	r24, 0x08	; 8
    1e22:	8c 93       	st	X, r24
    1e24:	fe 01       	movw	r30, r28
    1e26:	ef 5a       	subi	r30, 0xAF	; 175
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	a0 e8       	ldi	r26, 0x80	; 128
    1e30:	bf e3       	ldi	r27, 0x3F	; 63
    1e32:	80 83       	st	Z, r24
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	a2 83       	std	Z+2, r26	; 0x02
    1e38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e3a:	8e 01       	movw	r16, r28
    1e3c:	03 5b       	subi	r16, 0xB3	; 179
    1e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e40:	fe 01       	movw	r30, r28
    1e42:	ef 5a       	subi	r30, 0xAF	; 175
    1e44:	ff 4f       	sbci	r31, 0xFF	; 255
    1e46:	60 81       	ld	r22, Z
    1e48:	71 81       	ldd	r23, Z+1	; 0x01
    1e4a:	82 81       	ldd	r24, Z+2	; 0x02
    1e4c:	93 81       	ldd	r25, Z+3	; 0x03
    1e4e:	20 e0       	ldi	r18, 0x00	; 0
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	4a e7       	ldi	r20, 0x7A	; 122
    1e54:	53 e4       	ldi	r21, 0x43	; 67
    1e56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	f8 01       	movw	r30, r16
    1e60:	80 83       	st	Z, r24
    1e62:	91 83       	std	Z+1, r25	; 0x01
    1e64:	a2 83       	std	Z+2, r26	; 0x02
    1e66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e68:	fe 01       	movw	r30, r28
    1e6a:	e3 5b       	subi	r30, 0xB3	; 179
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	40 e8       	ldi	r20, 0x80	; 128
    1e7c:	5f e3       	ldi	r21, 0x3F	; 63
    1e7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e82:	88 23       	and	r24, r24
    1e84:	44 f4       	brge	.+16     	; 0x1e96 <LCD_displayCharacter+0x224>
		__ticks = 1;
    1e86:	fe 01       	movw	r30, r28
    1e88:	e5 5b       	subi	r30, 0xB5	; 181
    1e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	91 83       	std	Z+1, r25	; 0x01
    1e92:	80 83       	st	Z, r24
    1e94:	64 c0       	rjmp	.+200    	; 0x1f5e <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    1e96:	fe 01       	movw	r30, r28
    1e98:	e3 5b       	subi	r30, 0xB3	; 179
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	3f ef       	ldi	r19, 0xFF	; 255
    1ea8:	4f e7       	ldi	r20, 0x7F	; 127
    1eaa:	57 e4       	ldi	r21, 0x47	; 71
    1eac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eb0:	18 16       	cp	r1, r24
    1eb2:	0c f0       	brlt	.+2      	; 0x1eb6 <LCD_displayCharacter+0x244>
    1eb4:	43 c0       	rjmp	.+134    	; 0x1f3c <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eb6:	fe 01       	movw	r30, r28
    1eb8:	ef 5a       	subi	r30, 0xAF	; 175
    1eba:	ff 4f       	sbci	r31, 0xFF	; 255
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	40 e2       	ldi	r20, 0x20	; 32
    1eca:	51 e4       	ldi	r21, 0x41	; 65
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8e 01       	movw	r16, r28
    1ed6:	05 5b       	subi	r16, 0xB5	; 181
    1ed8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eda:	bc 01       	movw	r22, r24
    1edc:	cd 01       	movw	r24, r26
    1ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	f8 01       	movw	r30, r16
    1ee8:	91 83       	std	Z+1, r25	; 0x01
    1eea:	80 83       	st	Z, r24
    1eec:	1f c0       	rjmp	.+62     	; 0x1f2c <LCD_displayCharacter+0x2ba>
    1eee:	fe 01       	movw	r30, r28
    1ef0:	e7 5b       	subi	r30, 0xB7	; 183
    1ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef4:	89 e1       	ldi	r24, 0x19	; 25
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	91 83       	std	Z+1, r25	; 0x01
    1efa:	80 83       	st	Z, r24
    1efc:	fe 01       	movw	r30, r28
    1efe:	e7 5b       	subi	r30, 0xB7	; 183
    1f00:	ff 4f       	sbci	r31, 0xFF	; 255
    1f02:	80 81       	ld	r24, Z
    1f04:	91 81       	ldd	r25, Z+1	; 0x01
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <LCD_displayCharacter+0x294>
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e7 5b       	subi	r30, 0xB7	; 183
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	91 83       	std	Z+1, r25	; 0x01
    1f12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f14:	de 01       	movw	r26, r28
    1f16:	a5 5b       	subi	r26, 0xB5	; 181
    1f18:	bf 4f       	sbci	r27, 0xFF	; 255
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e5 5b       	subi	r30, 0xB5	; 181
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 81       	ld	r24, Z
    1f22:	91 81       	ldd	r25, Z+1	; 0x01
    1f24:	01 97       	sbiw	r24, 0x01	; 1
    1f26:	11 96       	adiw	r26, 0x01	; 1
    1f28:	9c 93       	st	X, r25
    1f2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f2c:	fe 01       	movw	r30, r28
    1f2e:	e5 5b       	subi	r30, 0xB5	; 181
    1f30:	ff 4f       	sbci	r31, 0xFF	; 255
    1f32:	80 81       	ld	r24, Z
    1f34:	91 81       	ldd	r25, Z+1	; 0x01
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	d1 f6       	brne	.-76     	; 0x1eee <LCD_displayCharacter+0x27c>
    1f3a:	27 c0       	rjmp	.+78     	; 0x1f8a <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f3c:	8e 01       	movw	r16, r28
    1f3e:	05 5b       	subi	r16, 0xB5	; 181
    1f40:	1f 4f       	sbci	r17, 0xFF	; 255
    1f42:	fe 01       	movw	r30, r28
    1f44:	e3 5b       	subi	r30, 0xB3	; 179
    1f46:	ff 4f       	sbci	r31, 0xFF	; 255
    1f48:	60 81       	ld	r22, Z
    1f4a:	71 81       	ldd	r23, Z+1	; 0x01
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	93 81       	ldd	r25, Z+3	; 0x03
    1f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f54:	dc 01       	movw	r26, r24
    1f56:	cb 01       	movw	r24, r22
    1f58:	f8 01       	movw	r30, r16
    1f5a:	91 83       	std	Z+1, r25	; 0x01
    1f5c:	80 83       	st	Z, r24
    1f5e:	de 01       	movw	r26, r28
    1f60:	a9 5b       	subi	r26, 0xB9	; 185
    1f62:	bf 4f       	sbci	r27, 0xFF	; 255
    1f64:	fe 01       	movw	r30, r28
    1f66:	e5 5b       	subi	r30, 0xB5	; 181
    1f68:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6a:	80 81       	ld	r24, Z
    1f6c:	91 81       	ldd	r25, Z+1	; 0x01
    1f6e:	8d 93       	st	X+, r24
    1f70:	9c 93       	st	X, r25
    1f72:	fe 01       	movw	r30, r28
    1f74:	e9 5b       	subi	r30, 0xB9	; 185
    1f76:	ff 4f       	sbci	r31, 0xFF	; 255
    1f78:	80 81       	ld	r24, Z
    1f7a:	91 81       	ldd	r25, Z+1	; 0x01
    1f7c:	01 97       	sbiw	r24, 0x01	; 1
    1f7e:	f1 f7       	brne	.-4      	; 0x1f7c <LCD_displayCharacter+0x30a>
    1f80:	fe 01       	movw	r30, r28
    1f82:	e9 5b       	subi	r30, 0xB9	; 185
    1f84:	ff 4f       	sbci	r31, 0xFF	; 255
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	80 83       	st	Z, r24
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
    1f8a:	a2 e3       	ldi	r26, 0x32	; 50
    1f8c:	b0 e0       	ldi	r27, 0x00	; 0
    1f8e:	e2 e3       	ldi	r30, 0x32	; 50
    1f90:	f0 e0       	ldi	r31, 0x00	; 0
    1f92:	80 81       	ld	r24, Z
    1f94:	98 2f       	mov	r25, r24
    1f96:	90 7f       	andi	r25, 0xF0	; 240
    1f98:	fe 01       	movw	r30, r28
    1f9a:	ed 59       	subi	r30, 0x9D	; 157
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	80 81       	ld	r24, Z
    1fa0:	82 95       	swap	r24
    1fa2:	8f 70       	andi	r24, 0x0F	; 15
    1fa4:	89 2b       	or	r24, r25
    1fa6:	8c 93       	st	X, r24
    1fa8:	fe 01       	movw	r30, r28
    1faa:	ed 5b       	subi	r30, 0xBD	; 189
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	a0 e8       	ldi	r26, 0x80	; 128
    1fb4:	bf e3       	ldi	r27, 0x3F	; 63
    1fb6:	80 83       	st	Z, r24
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	a2 83       	std	Z+2, r26	; 0x02
    1fbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fbe:	8e 01       	movw	r16, r28
    1fc0:	01 5c       	subi	r16, 0xC1	; 193
    1fc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	ed 5b       	subi	r30, 0xBD	; 189
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	60 81       	ld	r22, Z
    1fcc:	71 81       	ldd	r23, Z+1	; 0x01
    1fce:	82 81       	ldd	r24, Z+2	; 0x02
    1fd0:	93 81       	ldd	r25, Z+3	; 0x03
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	4a e7       	ldi	r20, 0x7A	; 122
    1fd8:	53 e4       	ldi	r21, 0x43	; 67
    1fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	f8 01       	movw	r30, r16
    1fe4:	80 83       	st	Z, r24
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	a2 83       	std	Z+2, r26	; 0x02
    1fea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fec:	fe 01       	movw	r30, r28
    1fee:	ff 96       	adiw	r30, 0x3f	; 63
    1ff0:	60 81       	ld	r22, Z
    1ff2:	71 81       	ldd	r23, Z+1	; 0x01
    1ff4:	82 81       	ldd	r24, Z+2	; 0x02
    1ff6:	93 81       	ldd	r25, Z+3	; 0x03
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	2c f4       	brge	.+10     	; 0x2012 <LCD_displayCharacter+0x3a0>
		__ticks = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	9e af       	std	Y+62, r25	; 0x3e
    200e:	8d af       	std	Y+61, r24	; 0x3d
    2010:	46 c0       	rjmp	.+140    	; 0x209e <LCD_displayCharacter+0x42c>
	else if (__tmp > 65535)
    2012:	fe 01       	movw	r30, r28
    2014:	ff 96       	adiw	r30, 0x3f	; 63
    2016:	60 81       	ld	r22, Z
    2018:	71 81       	ldd	r23, Z+1	; 0x01
    201a:	82 81       	ldd	r24, Z+2	; 0x02
    201c:	93 81       	ldd	r25, Z+3	; 0x03
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	3f ef       	ldi	r19, 0xFF	; 255
    2022:	4f e7       	ldi	r20, 0x7F	; 127
    2024:	57 e4       	ldi	r21, 0x47	; 71
    2026:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    202a:	18 16       	cp	r1, r24
    202c:	64 f5       	brge	.+88     	; 0x2086 <LCD_displayCharacter+0x414>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202e:	fe 01       	movw	r30, r28
    2030:	ed 5b       	subi	r30, 0xBD	; 189
    2032:	ff 4f       	sbci	r31, 0xFF	; 255
    2034:	60 81       	ld	r22, Z
    2036:	71 81       	ldd	r23, Z+1	; 0x01
    2038:	82 81       	ldd	r24, Z+2	; 0x02
    203a:	93 81       	ldd	r25, Z+3	; 0x03
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	40 e2       	ldi	r20, 0x20	; 32
    2042:	51 e4       	ldi	r21, 0x41	; 65
    2044:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	9e af       	std	Y+62, r25	; 0x3e
    205a:	8d af       	std	Y+61, r24	; 0x3d
    205c:	0f c0       	rjmp	.+30     	; 0x207c <LCD_displayCharacter+0x40a>
    205e:	89 e1       	ldi	r24, 0x19	; 25
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	9c af       	std	Y+60, r25	; 0x3c
    2064:	8b af       	std	Y+59, r24	; 0x3b
    2066:	8b ad       	ldd	r24, Y+59	; 0x3b
    2068:	9c ad       	ldd	r25, Y+60	; 0x3c
    206a:	01 97       	sbiw	r24, 0x01	; 1
    206c:	f1 f7       	brne	.-4      	; 0x206a <LCD_displayCharacter+0x3f8>
    206e:	9c af       	std	Y+60, r25	; 0x3c
    2070:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2072:	8d ad       	ldd	r24, Y+61	; 0x3d
    2074:	9e ad       	ldd	r25, Y+62	; 0x3e
    2076:	01 97       	sbiw	r24, 0x01	; 1
    2078:	9e af       	std	Y+62, r25	; 0x3e
    207a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207c:	8d ad       	ldd	r24, Y+61	; 0x3d
    207e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2080:	00 97       	sbiw	r24, 0x00	; 0
    2082:	69 f7       	brne	.-38     	; 0x205e <LCD_displayCharacter+0x3ec>
    2084:	16 c0       	rjmp	.+44     	; 0x20b2 <LCD_displayCharacter+0x440>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2086:	fe 01       	movw	r30, r28
    2088:	ff 96       	adiw	r30, 0x3f	; 63
    208a:	60 81       	ld	r22, Z
    208c:	71 81       	ldd	r23, Z+1	; 0x01
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	93 81       	ldd	r25, Z+3	; 0x03
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9e af       	std	Y+62, r25	; 0x3e
    209c:	8d af       	std	Y+61, r24	; 0x3d
    209e:	8d ad       	ldd	r24, Y+61	; 0x3d
    20a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    20a2:	9a af       	std	Y+58, r25	; 0x3a
    20a4:	89 af       	std	Y+57, r24	; 0x39
    20a6:	89 ad       	ldd	r24, Y+57	; 0x39
    20a8:	9a ad       	ldd	r25, Y+58	; 0x3a
    20aa:	01 97       	sbiw	r24, 0x01	; 1
    20ac:	f1 f7       	brne	.-4      	; 0x20aa <LCD_displayCharacter+0x438>
    20ae:	9a af       	std	Y+58, r25	; 0x3a
    20b0:	89 af       	std	Y+57, r24	; 0x39
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    20b2:	a8 e3       	ldi	r26, 0x38	; 56
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e8 e3       	ldi	r30, 0x38	; 56
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	87 7f       	andi	r24, 0xF7	; 247
    20be:	8c 93       	st	X, r24
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	a0 e8       	ldi	r26, 0x80	; 128
    20c6:	bf e3       	ldi	r27, 0x3F	; 63
    20c8:	8d ab       	std	Y+53, r24	; 0x35
    20ca:	9e ab       	std	Y+54, r25	; 0x36
    20cc:	af ab       	std	Y+55, r26	; 0x37
    20ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d0:	6d a9       	ldd	r22, Y+53	; 0x35
    20d2:	7e a9       	ldd	r23, Y+54	; 0x36
    20d4:	8f a9       	ldd	r24, Y+55	; 0x37
    20d6:	98 ad       	ldd	r25, Y+56	; 0x38
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	4a e7       	ldi	r20, 0x7A	; 122
    20de:	53 e4       	ldi	r21, 0x43	; 67
    20e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e4:	dc 01       	movw	r26, r24
    20e6:	cb 01       	movw	r24, r22
    20e8:	89 ab       	std	Y+49, r24	; 0x31
    20ea:	9a ab       	std	Y+50, r25	; 0x32
    20ec:	ab ab       	std	Y+51, r26	; 0x33
    20ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20f0:	69 a9       	ldd	r22, Y+49	; 0x31
    20f2:	7a a9       	ldd	r23, Y+50	; 0x32
    20f4:	8b a9       	ldd	r24, Y+51	; 0x33
    20f6:	9c a9       	ldd	r25, Y+52	; 0x34
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	40 e8       	ldi	r20, 0x80	; 128
    20fe:	5f e3       	ldi	r21, 0x3F	; 63
    2100:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2104:	88 23       	and	r24, r24
    2106:	2c f4       	brge	.+10     	; 0x2112 <LCD_displayCharacter+0x4a0>
		__ticks = 1;
    2108:	81 e0       	ldi	r24, 0x01	; 1
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	98 ab       	std	Y+48, r25	; 0x30
    210e:	8f a7       	std	Y+47, r24	; 0x2f
    2110:	3f c0       	rjmp	.+126    	; 0x2190 <LCD_displayCharacter+0x51e>
	else if (__tmp > 65535)
    2112:	69 a9       	ldd	r22, Y+49	; 0x31
    2114:	7a a9       	ldd	r23, Y+50	; 0x32
    2116:	8b a9       	ldd	r24, Y+51	; 0x33
    2118:	9c a9       	ldd	r25, Y+52	; 0x34
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	3f ef       	ldi	r19, 0xFF	; 255
    211e:	4f e7       	ldi	r20, 0x7F	; 127
    2120:	57 e4       	ldi	r21, 0x47	; 71
    2122:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2126:	18 16       	cp	r1, r24
    2128:	4c f5       	brge	.+82     	; 0x217c <LCD_displayCharacter+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212a:	6d a9       	ldd	r22, Y+53	; 0x35
    212c:	7e a9       	ldd	r23, Y+54	; 0x36
    212e:	8f a9       	ldd	r24, Y+55	; 0x37
    2130:	98 ad       	ldd	r25, Y+56	; 0x38
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e2       	ldi	r20, 0x20	; 32
    2138:	51 e4       	ldi	r21, 0x41	; 65
    213a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	bc 01       	movw	r22, r24
    2144:	cd 01       	movw	r24, r26
    2146:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214a:	dc 01       	movw	r26, r24
    214c:	cb 01       	movw	r24, r22
    214e:	98 ab       	std	Y+48, r25	; 0x30
    2150:	8f a7       	std	Y+47, r24	; 0x2f
    2152:	0f c0       	rjmp	.+30     	; 0x2172 <LCD_displayCharacter+0x500>
    2154:	89 e1       	ldi	r24, 0x19	; 25
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	9e a7       	std	Y+46, r25	; 0x2e
    215a:	8d a7       	std	Y+45, r24	; 0x2d
    215c:	8d a5       	ldd	r24, Y+45	; 0x2d
    215e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <LCD_displayCharacter+0x4ee>
    2164:	9e a7       	std	Y+46, r25	; 0x2e
    2166:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2168:	8f a5       	ldd	r24, Y+47	; 0x2f
    216a:	98 a9       	ldd	r25, Y+48	; 0x30
    216c:	01 97       	sbiw	r24, 0x01	; 1
    216e:	98 ab       	std	Y+48, r25	; 0x30
    2170:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2172:	8f a5       	ldd	r24, Y+47	; 0x2f
    2174:	98 a9       	ldd	r25, Y+48	; 0x30
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	69 f7       	brne	.-38     	; 0x2154 <LCD_displayCharacter+0x4e2>
    217a:	14 c0       	rjmp	.+40     	; 0x21a4 <LCD_displayCharacter+0x532>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217c:	69 a9       	ldd	r22, Y+49	; 0x31
    217e:	7a a9       	ldd	r23, Y+50	; 0x32
    2180:	8b a9       	ldd	r24, Y+51	; 0x33
    2182:	9c a9       	ldd	r25, Y+52	; 0x34
    2184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2188:	dc 01       	movw	r26, r24
    218a:	cb 01       	movw	r24, r22
    218c:	98 ab       	std	Y+48, r25	; 0x30
    218e:	8f a7       	std	Y+47, r24	; 0x2f
    2190:	8f a5       	ldd	r24, Y+47	; 0x2f
    2192:	98 a9       	ldd	r25, Y+48	; 0x30
    2194:	9c a7       	std	Y+44, r25	; 0x2c
    2196:	8b a7       	std	Y+43, r24	; 0x2b
    2198:	8b a5       	ldd	r24, Y+43	; 0x2b
    219a:	9c a5       	ldd	r25, Y+44	; 0x2c
    219c:	01 97       	sbiw	r24, 0x01	; 1
    219e:	f1 f7       	brne	.-4      	; 0x219c <LCD_displayCharacter+0x52a>
    21a0:	9c a7       	std	Y+44, r25	; 0x2c
    21a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    21a4:	a8 e3       	ldi	r26, 0x38	; 56
    21a6:	b0 e0       	ldi	r27, 0x00	; 0
    21a8:	e8 e3       	ldi	r30, 0x38	; 56
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	88 60       	ori	r24, 0x08	; 8
    21b0:	8c 93       	st	X, r24
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	a0 e8       	ldi	r26, 0x80	; 128
    21b8:	bf e3       	ldi	r27, 0x3F	; 63
    21ba:	8f a3       	std	Y+39, r24	; 0x27
    21bc:	98 a7       	std	Y+40, r25	; 0x28
    21be:	a9 a7       	std	Y+41, r26	; 0x29
    21c0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c2:	6f a1       	ldd	r22, Y+39	; 0x27
    21c4:	78 a5       	ldd	r23, Y+40	; 0x28
    21c6:	89 a5       	ldd	r24, Y+41	; 0x29
    21c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	4a e7       	ldi	r20, 0x7A	; 122
    21d0:	53 e4       	ldi	r21, 0x43	; 67
    21d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d6:	dc 01       	movw	r26, r24
    21d8:	cb 01       	movw	r24, r22
    21da:	8b a3       	std	Y+35, r24	; 0x23
    21dc:	9c a3       	std	Y+36, r25	; 0x24
    21de:	ad a3       	std	Y+37, r26	; 0x25
    21e0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21e2:	6b a1       	ldd	r22, Y+35	; 0x23
    21e4:	7c a1       	ldd	r23, Y+36	; 0x24
    21e6:	8d a1       	ldd	r24, Y+37	; 0x25
    21e8:	9e a1       	ldd	r25, Y+38	; 0x26
    21ea:	20 e0       	ldi	r18, 0x00	; 0
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	40 e8       	ldi	r20, 0x80	; 128
    21f0:	5f e3       	ldi	r21, 0x3F	; 63
    21f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21f6:	88 23       	and	r24, r24
    21f8:	2c f4       	brge	.+10     	; 0x2204 <LCD_displayCharacter+0x592>
		__ticks = 1;
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9a a3       	std	Y+34, r25	; 0x22
    2200:	89 a3       	std	Y+33, r24	; 0x21
    2202:	3f c0       	rjmp	.+126    	; 0x2282 <LCD_displayCharacter+0x610>
	else if (__tmp > 65535)
    2204:	6b a1       	ldd	r22, Y+35	; 0x23
    2206:	7c a1       	ldd	r23, Y+36	; 0x24
    2208:	8d a1       	ldd	r24, Y+37	; 0x25
    220a:	9e a1       	ldd	r25, Y+38	; 0x26
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	3f ef       	ldi	r19, 0xFF	; 255
    2210:	4f e7       	ldi	r20, 0x7F	; 127
    2212:	57 e4       	ldi	r21, 0x47	; 71
    2214:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2218:	18 16       	cp	r1, r24
    221a:	4c f5       	brge	.+82     	; 0x226e <LCD_displayCharacter+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221c:	6f a1       	ldd	r22, Y+39	; 0x27
    221e:	78 a5       	ldd	r23, Y+40	; 0x28
    2220:	89 a5       	ldd	r24, Y+41	; 0x29
    2222:	9a a5       	ldd	r25, Y+42	; 0x2a
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	40 e2       	ldi	r20, 0x20	; 32
    222a:	51 e4       	ldi	r21, 0x41	; 65
    222c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2230:	dc 01       	movw	r26, r24
    2232:	cb 01       	movw	r24, r22
    2234:	bc 01       	movw	r22, r24
    2236:	cd 01       	movw	r24, r26
    2238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223c:	dc 01       	movw	r26, r24
    223e:	cb 01       	movw	r24, r22
    2240:	9a a3       	std	Y+34, r25	; 0x22
    2242:	89 a3       	std	Y+33, r24	; 0x21
    2244:	0f c0       	rjmp	.+30     	; 0x2264 <LCD_displayCharacter+0x5f2>
    2246:	89 e1       	ldi	r24, 0x19	; 25
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	98 a3       	std	Y+32, r25	; 0x20
    224c:	8f 8f       	std	Y+31, r24	; 0x1f
    224e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2250:	98 a1       	ldd	r25, Y+32	; 0x20
    2252:	01 97       	sbiw	r24, 0x01	; 1
    2254:	f1 f7       	brne	.-4      	; 0x2252 <LCD_displayCharacter+0x5e0>
    2256:	98 a3       	std	Y+32, r25	; 0x20
    2258:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225a:	89 a1       	ldd	r24, Y+33	; 0x21
    225c:	9a a1       	ldd	r25, Y+34	; 0x22
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	9a a3       	std	Y+34, r25	; 0x22
    2262:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2264:	89 a1       	ldd	r24, Y+33	; 0x21
    2266:	9a a1       	ldd	r25, Y+34	; 0x22
    2268:	00 97       	sbiw	r24, 0x00	; 0
    226a:	69 f7       	brne	.-38     	; 0x2246 <LCD_displayCharacter+0x5d4>
    226c:	14 c0       	rjmp	.+40     	; 0x2296 <LCD_displayCharacter+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226e:	6b a1       	ldd	r22, Y+35	; 0x23
    2270:	7c a1       	ldd	r23, Y+36	; 0x24
    2272:	8d a1       	ldd	r24, Y+37	; 0x25
    2274:	9e a1       	ldd	r25, Y+38	; 0x26
    2276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	9a a3       	std	Y+34, r25	; 0x22
    2280:	89 a3       	std	Y+33, r24	; 0x21
    2282:	89 a1       	ldd	r24, Y+33	; 0x21
    2284:	9a a1       	ldd	r25, Y+34	; 0x22
    2286:	9e 8f       	std	Y+30, r25	; 0x1e
    2288:	8d 8f       	std	Y+29, r24	; 0x1d
    228a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    228c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    228e:	01 97       	sbiw	r24, 0x01	; 1
    2290:	f1 f7       	brne	.-4      	; 0x228e <LCD_displayCharacter+0x61c>
    2292:	9e 8f       	std	Y+30, r25	; 0x1e
    2294:	8d 8f       	std	Y+29, r24	; 0x1d

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
    2296:	a2 e3       	ldi	r26, 0x32	; 50
    2298:	b0 e0       	ldi	r27, 0x00	; 0
    229a:	e2 e3       	ldi	r30, 0x32	; 50
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	98 2f       	mov	r25, r24
    22a2:	90 7f       	andi	r25, 0xF0	; 240
    22a4:	fe 01       	movw	r30, r28
    22a6:	ed 59       	subi	r30, 0x9D	; 157
    22a8:	ff 4f       	sbci	r31, 0xFF	; 255
    22aa:	80 81       	ld	r24, Z
    22ac:	8f 70       	andi	r24, 0x0F	; 15
    22ae:	89 2b       	or	r24, r25
    22b0:	8c 93       	st	X, r24
    22b2:	80 e0       	ldi	r24, 0x00	; 0
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	a0 e8       	ldi	r26, 0x80	; 128
    22b8:	bf e3       	ldi	r27, 0x3F	; 63
    22ba:	89 8f       	std	Y+25, r24	; 0x19
    22bc:	9a 8f       	std	Y+26, r25	; 0x1a
    22be:	ab 8f       	std	Y+27, r26	; 0x1b
    22c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c2:	69 8d       	ldd	r22, Y+25	; 0x19
    22c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	4a e7       	ldi	r20, 0x7A	; 122
    22d0:	53 e4       	ldi	r21, 0x43	; 67
    22d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	8d 8b       	std	Y+21, r24	; 0x15
    22dc:	9e 8b       	std	Y+22, r25	; 0x16
    22de:	af 8b       	std	Y+23, r26	; 0x17
    22e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22e2:	6d 89       	ldd	r22, Y+21	; 0x15
    22e4:	7e 89       	ldd	r23, Y+22	; 0x16
    22e6:	8f 89       	ldd	r24, Y+23	; 0x17
    22e8:	98 8d       	ldd	r25, Y+24	; 0x18
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	40 e8       	ldi	r20, 0x80	; 128
    22f0:	5f e3       	ldi	r21, 0x3F	; 63
    22f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f6:	88 23       	and	r24, r24
    22f8:	2c f4       	brge	.+10     	; 0x2304 <LCD_displayCharacter+0x692>
		__ticks = 1;
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	9c 8b       	std	Y+20, r25	; 0x14
    2300:	8b 8b       	std	Y+19, r24	; 0x13
    2302:	3f c0       	rjmp	.+126    	; 0x2382 <LCD_displayCharacter+0x710>
	else if (__tmp > 65535)
    2304:	6d 89       	ldd	r22, Y+21	; 0x15
    2306:	7e 89       	ldd	r23, Y+22	; 0x16
    2308:	8f 89       	ldd	r24, Y+23	; 0x17
    230a:	98 8d       	ldd	r25, Y+24	; 0x18
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	3f ef       	ldi	r19, 0xFF	; 255
    2310:	4f e7       	ldi	r20, 0x7F	; 127
    2312:	57 e4       	ldi	r21, 0x47	; 71
    2314:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2318:	18 16       	cp	r1, r24
    231a:	4c f5       	brge	.+82     	; 0x236e <LCD_displayCharacter+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    231c:	69 8d       	ldd	r22, Y+25	; 0x19
    231e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2320:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2322:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2324:	20 e0       	ldi	r18, 0x00	; 0
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e2       	ldi	r20, 0x20	; 32
    232a:	51 e4       	ldi	r21, 0x41	; 65
    232c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2330:	dc 01       	movw	r26, r24
    2332:	cb 01       	movw	r24, r22
    2334:	bc 01       	movw	r22, r24
    2336:	cd 01       	movw	r24, r26
    2338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	9c 8b       	std	Y+20, r25	; 0x14
    2342:	8b 8b       	std	Y+19, r24	; 0x13
    2344:	0f c0       	rjmp	.+30     	; 0x2364 <LCD_displayCharacter+0x6f2>
    2346:	89 e1       	ldi	r24, 0x19	; 25
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	9a 8b       	std	Y+18, r25	; 0x12
    234c:	89 8b       	std	Y+17, r24	; 0x11
    234e:	89 89       	ldd	r24, Y+17	; 0x11
    2350:	9a 89       	ldd	r25, Y+18	; 0x12
    2352:	01 97       	sbiw	r24, 0x01	; 1
    2354:	f1 f7       	brne	.-4      	; 0x2352 <LCD_displayCharacter+0x6e0>
    2356:	9a 8b       	std	Y+18, r25	; 0x12
    2358:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    235a:	8b 89       	ldd	r24, Y+19	; 0x13
    235c:	9c 89       	ldd	r25, Y+20	; 0x14
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	9c 8b       	std	Y+20, r25	; 0x14
    2362:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2364:	8b 89       	ldd	r24, Y+19	; 0x13
    2366:	9c 89       	ldd	r25, Y+20	; 0x14
    2368:	00 97       	sbiw	r24, 0x00	; 0
    236a:	69 f7       	brne	.-38     	; 0x2346 <LCD_displayCharacter+0x6d4>
    236c:	14 c0       	rjmp	.+40     	; 0x2396 <LCD_displayCharacter+0x724>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236e:	6d 89       	ldd	r22, Y+21	; 0x15
    2370:	7e 89       	ldd	r23, Y+22	; 0x16
    2372:	8f 89       	ldd	r24, Y+23	; 0x17
    2374:	98 8d       	ldd	r25, Y+24	; 0x18
    2376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	9c 8b       	std	Y+20, r25	; 0x14
    2380:	8b 8b       	std	Y+19, r24	; 0x13
    2382:	8b 89       	ldd	r24, Y+19	; 0x13
    2384:	9c 89       	ldd	r25, Y+20	; 0x14
    2386:	98 8b       	std	Y+16, r25	; 0x10
    2388:	8f 87       	std	Y+15, r24	; 0x0f
    238a:	8f 85       	ldd	r24, Y+15	; 0x0f
    238c:	98 89       	ldd	r25, Y+16	; 0x10
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	f1 f7       	brne	.-4      	; 0x238e <LCD_displayCharacter+0x71c>
    2392:	98 8b       	std	Y+16, r25	; 0x10
    2394:	8f 87       	std	Y+15, r24	; 0x0f
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2396:	a8 e3       	ldi	r26, 0x38	; 56
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e8 e3       	ldi	r30, 0x38	; 56
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	87 7f       	andi	r24, 0xF7	; 247
    23a2:	8c 93       	st	X, r24
    23a4:	80 e0       	ldi	r24, 0x00	; 0
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	a0 e8       	ldi	r26, 0x80	; 128
    23aa:	bf e3       	ldi	r27, 0x3F	; 63
    23ac:	8b 87       	std	Y+11, r24	; 0x0b
    23ae:	9c 87       	std	Y+12, r25	; 0x0c
    23b0:	ad 87       	std	Y+13, r26	; 0x0d
    23b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    23bc:	20 e0       	ldi	r18, 0x00	; 0
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	4a e7       	ldi	r20, 0x7A	; 122
    23c2:	53 e4       	ldi	r21, 0x43	; 67
    23c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c8:	dc 01       	movw	r26, r24
    23ca:	cb 01       	movw	r24, r22
    23cc:	8f 83       	std	Y+7, r24	; 0x07
    23ce:	98 87       	std	Y+8, r25	; 0x08
    23d0:	a9 87       	std	Y+9, r26	; 0x09
    23d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23d4:	6f 81       	ldd	r22, Y+7	; 0x07
    23d6:	78 85       	ldd	r23, Y+8	; 0x08
    23d8:	89 85       	ldd	r24, Y+9	; 0x09
    23da:	9a 85       	ldd	r25, Y+10	; 0x0a
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	40 e8       	ldi	r20, 0x80	; 128
    23e2:	5f e3       	ldi	r21, 0x3F	; 63
    23e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e8:	88 23       	and	r24, r24
    23ea:	2c f4       	brge	.+10     	; 0x23f6 <LCD_displayCharacter+0x784>
		__ticks = 1;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	9e 83       	std	Y+6, r25	; 0x06
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	3f c0       	rjmp	.+126    	; 0x2474 <LCD_displayCharacter+0x802>
	else if (__tmp > 65535)
    23f6:	6f 81       	ldd	r22, Y+7	; 0x07
    23f8:	78 85       	ldd	r23, Y+8	; 0x08
    23fa:	89 85       	ldd	r24, Y+9	; 0x09
    23fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	3f ef       	ldi	r19, 0xFF	; 255
    2402:	4f e7       	ldi	r20, 0x7F	; 127
    2404:	57 e4       	ldi	r21, 0x47	; 71
    2406:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    240a:	18 16       	cp	r1, r24
    240c:	4c f5       	brge	.+82     	; 0x2460 <LCD_displayCharacter+0x7ee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2410:	7c 85       	ldd	r23, Y+12	; 0x0c
    2412:	8d 85       	ldd	r24, Y+13	; 0x0d
    2414:	9e 85       	ldd	r25, Y+14	; 0x0e
    2416:	20 e0       	ldi	r18, 0x00	; 0
    2418:	30 e0       	ldi	r19, 0x00	; 0
    241a:	40 e2       	ldi	r20, 0x20	; 32
    241c:	51 e4       	ldi	r21, 0x41	; 65
    241e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2422:	dc 01       	movw	r26, r24
    2424:	cb 01       	movw	r24, r22
    2426:	bc 01       	movw	r22, r24
    2428:	cd 01       	movw	r24, r26
    242a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	9e 83       	std	Y+6, r25	; 0x06
    2434:	8d 83       	std	Y+5, r24	; 0x05
    2436:	0f c0       	rjmp	.+30     	; 0x2456 <LCD_displayCharacter+0x7e4>
    2438:	89 e1       	ldi	r24, 0x19	; 25
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	9c 83       	std	Y+4, r25	; 0x04
    243e:	8b 83       	std	Y+3, r24	; 0x03
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <LCD_displayCharacter+0x7d2>
    2448:	9c 83       	std	Y+4, r25	; 0x04
    244a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244c:	8d 81       	ldd	r24, Y+5	; 0x05
    244e:	9e 81       	ldd	r25, Y+6	; 0x06
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2456:	8d 81       	ldd	r24, Y+5	; 0x05
    2458:	9e 81       	ldd	r25, Y+6	; 0x06
    245a:	00 97       	sbiw	r24, 0x00	; 0
    245c:	69 f7       	brne	.-38     	; 0x2438 <LCD_displayCharacter+0x7c6>
    245e:	14 c0       	rjmp	.+40     	; 0x2488 <LCD_displayCharacter+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2460:	6f 81       	ldd	r22, Y+7	; 0x07
    2462:	78 85       	ldd	r23, Y+8	; 0x08
    2464:	89 85       	ldd	r24, Y+9	; 0x09
    2466:	9a 85       	ldd	r25, Y+10	; 0x0a
    2468:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246c:	dc 01       	movw	r26, r24
    246e:	cb 01       	movw	r24, r22
    2470:	9e 83       	std	Y+6, r25	; 0x06
    2472:	8d 83       	std	Y+5, r24	; 0x05
    2474:	8d 81       	ldd	r24, Y+5	; 0x05
    2476:	9e 81       	ldd	r25, Y+6	; 0x06
    2478:	9a 83       	std	Y+2, r25	; 0x02
    247a:	89 83       	std	Y+1, r24	; 0x01
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	9a 81       	ldd	r25, Y+2	; 0x02
    2480:	01 97       	sbiw	r24, 0x01	; 1
    2482:	f1 f7       	brne	.-4      	; 0x2480 <LCD_displayCharacter+0x80e>
    2484:	9a 83       	std	Y+2, r25	; 0x02
    2486:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2488:	cd 59       	subi	r28, 0x9D	; 157
    248a:	df 4f       	sbci	r29, 0xFF	; 255
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	1f 91       	pop	r17
    249c:	0f 91       	pop	r16
    249e:	08 95       	ret

000024a0 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    24a0:	df 93       	push	r29
    24a2:	cf 93       	push	r28
    24a4:	00 d0       	rcall	.+0      	; 0x24a6 <LCD_displayString+0x6>
    24a6:	0f 92       	push	r0
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	9b 83       	std	Y+3, r25	; 0x03
    24ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    24b0:	19 82       	std	Y+1, r1	; 0x01
    24b2:	0e c0       	rjmp	.+28     	; 0x24d0 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	28 2f       	mov	r18, r24
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	9b 81       	ldd	r25, Y+3	; 0x03
    24be:	fc 01       	movw	r30, r24
    24c0:	e2 0f       	add	r30, r18
    24c2:	f3 1f       	adc	r31, r19
    24c4:	80 81       	ld	r24, Z
    24c6:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <LCD_displayCharacter>
		i++;
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	8f 5f       	subi	r24, 0xFF	; 255
    24ce:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    24d0:	89 81       	ldd	r24, Y+1	; 0x01
    24d2:	28 2f       	mov	r18, r24
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	9b 81       	ldd	r25, Y+3	; 0x03
    24da:	fc 01       	movw	r30, r24
    24dc:	e2 0f       	add	r30, r18
    24de:	f3 1f       	adc	r31, r19
    24e0:	80 81       	ld	r24, Z
    24e2:	88 23       	and	r24, r24
    24e4:	39 f7       	brne	.-50     	; 0x24b4 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	0f 90       	pop	r0
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	00 d0       	rcall	.+0      	; 0x24f8 <LCD_goToRowColumn+0x6>
    24f8:	00 d0       	rcall	.+0      	; 0x24fa <LCD_goToRowColumn+0x8>
    24fa:	0f 92       	push	r0
    24fc:	cd b7       	in	r28, 0x3d	; 61
    24fe:	de b7       	in	r29, 0x3e	; 62
    2500:	8a 83       	std	Y+2, r24	; 0x02
    2502:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    2504:	8a 81       	ldd	r24, Y+2	; 0x02
    2506:	28 2f       	mov	r18, r24
    2508:	30 e0       	ldi	r19, 0x00	; 0
    250a:	3d 83       	std	Y+5, r19	; 0x05
    250c:	2c 83       	std	Y+4, r18	; 0x04
    250e:	8c 81       	ldd	r24, Y+4	; 0x04
    2510:	9d 81       	ldd	r25, Y+5	; 0x05
    2512:	81 30       	cpi	r24, 0x01	; 1
    2514:	91 05       	cpc	r25, r1
    2516:	c1 f0       	breq	.+48     	; 0x2548 <LCD_goToRowColumn+0x56>
    2518:	2c 81       	ldd	r18, Y+4	; 0x04
    251a:	3d 81       	ldd	r19, Y+5	; 0x05
    251c:	22 30       	cpi	r18, 0x02	; 2
    251e:	31 05       	cpc	r19, r1
    2520:	2c f4       	brge	.+10     	; 0x252c <LCD_goToRowColumn+0x3a>
    2522:	8c 81       	ldd	r24, Y+4	; 0x04
    2524:	9d 81       	ldd	r25, Y+5	; 0x05
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	61 f0       	breq	.+24     	; 0x2542 <LCD_goToRowColumn+0x50>
    252a:	19 c0       	rjmp	.+50     	; 0x255e <LCD_goToRowColumn+0x6c>
    252c:	2c 81       	ldd	r18, Y+4	; 0x04
    252e:	3d 81       	ldd	r19, Y+5	; 0x05
    2530:	22 30       	cpi	r18, 0x02	; 2
    2532:	31 05       	cpc	r19, r1
    2534:	69 f0       	breq	.+26     	; 0x2550 <LCD_goToRowColumn+0x5e>
    2536:	8c 81       	ldd	r24, Y+4	; 0x04
    2538:	9d 81       	ldd	r25, Y+5	; 0x05
    253a:	83 30       	cpi	r24, 0x03	; 3
    253c:	91 05       	cpc	r25, r1
    253e:	61 f0       	breq	.+24     	; 0x2558 <LCD_goToRowColumn+0x66>
    2540:	0e c0       	rjmp	.+28     	; 0x255e <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	89 83       	std	Y+1, r24	; 0x01
    2546:	0b c0       	rjmp	.+22     	; 0x255e <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    2548:	8b 81       	ldd	r24, Y+3	; 0x03
    254a:	80 5c       	subi	r24, 0xC0	; 192
    254c:	89 83       	std	Y+1, r24	; 0x01
    254e:	07 c0       	rjmp	.+14     	; 0x255e <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2550:	8b 81       	ldd	r24, Y+3	; 0x03
    2552:	80 5f       	subi	r24, 0xF0	; 240
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	03 c0       	rjmp	.+6      	; 0x255e <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    2558:	8b 81       	ldd	r24, Y+3	; 0x03
    255a:	80 5b       	subi	r24, 0xB0	; 176
    255c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	80 68       	ori	r24, 0x80	; 128
    2562:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCD_sendCommand>
}
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	0f 90       	pop	r0
    256e:	0f 90       	pop	r0
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	08 95       	ret

00002576 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2576:	df 93       	push	r29
    2578:	cf 93       	push	r28
    257a:	00 d0       	rcall	.+0      	; 0x257c <LCD_displayStringRowColumn+0x6>
    257c:	00 d0       	rcall	.+0      	; 0x257e <LCD_displayStringRowColumn+0x8>
    257e:	cd b7       	in	r28, 0x3d	; 61
    2580:	de b7       	in	r29, 0x3e	; 62
    2582:	89 83       	std	Y+1, r24	; 0x01
    2584:	6a 83       	std	Y+2, r22	; 0x02
    2586:	5c 83       	std	Y+4, r21	; 0x04
    2588:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	6a 81       	ldd	r22, Y+2	; 0x02
    258e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	0e 94 50 12 	call	0x24a0	; 0x24a0 <LCD_displayString>
}
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	cf 91       	pop	r28
    25a4:	df 91       	pop	r29
    25a6:	08 95       	ret

000025a8 <LCD_integerToString>:

void LCD_integerToString(uint64 data)
{
    25a8:	df 93       	push	r29
    25aa:	cf 93       	push	r28
    25ac:	cd b7       	in	r28, 0x3d	; 61
    25ae:	de b7       	in	r29, 0x3e	; 62
    25b0:	c8 54       	subi	r28, 0x48	; 72
    25b2:	d0 40       	sbci	r29, 0x00	; 0
    25b4:	0f b6       	in	r0, 0x3f	; 63
    25b6:	f8 94       	cli
    25b8:	de bf       	out	0x3e, r29	; 62
    25ba:	0f be       	out	0x3f, r0	; 63
    25bc:	cd bf       	out	0x3d, r28	; 61
    25be:	fe 01       	movw	r30, r28
    25c0:	ef 5b       	subi	r30, 0xBF	; 191
    25c2:	ff 4f       	sbci	r31, 0xFF	; 255
    25c4:	20 83       	st	Z, r18
    25c6:	31 83       	std	Z+1, r19	; 0x01
    25c8:	42 83       	std	Z+2, r20	; 0x02
    25ca:	53 83       	std	Z+3, r21	; 0x03
    25cc:	64 83       	std	Z+4, r22	; 0x04
    25ce:	75 83       	std	Z+5, r23	; 0x05
    25d0:	86 83       	std	Z+6, r24	; 0x06
    25d2:	97 83       	std	Z+7, r25	; 0x07
   char buff[64]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    25d4:	fe 01       	movw	r30, r28
    25d6:	ef 5b       	subi	r30, 0xBF	; 191
    25d8:	ff 4f       	sbci	r31, 0xFF	; 255
    25da:	80 81       	ld	r24, Z
    25dc:	91 81       	ldd	r25, Z+1	; 0x01
    25de:	9e 01       	movw	r18, r28
    25e0:	2f 5f       	subi	r18, 0xFF	; 255
    25e2:	3f 4f       	sbci	r19, 0xFF	; 255
    25e4:	b9 01       	movw	r22, r18
    25e6:	4a e0       	ldi	r20, 0x0A	; 10
    25e8:	50 e0       	ldi	r21, 0x00	; 0
    25ea:	0e 94 87 13 	call	0x270e	; 0x270e <itoa>
   LCD_displayString(buff);
    25ee:	ce 01       	movw	r24, r28
    25f0:	01 96       	adiw	r24, 0x01	; 1
    25f2:	0e 94 50 12 	call	0x24a0	; 0x24a0 <LCD_displayString>
}
    25f6:	c8 5b       	subi	r28, 0xB8	; 184
    25f8:	df 4f       	sbci	r29, 0xFF	; 255
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	de bf       	out	0x3e, r29	; 62
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	cd bf       	out	0x3d, r28	; 61
    2604:	cf 91       	pop	r28
    2606:	df 91       	pop	r29
    2608:	08 95       	ret

0000260a <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	cd b7       	in	r28, 0x3d	; 61
    2610:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	0e 94 22 0a 	call	0x1444	; 0x1444 <LCD_sendCommand>
}
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	08 95       	ret

0000261e <__mulsi3>:
    261e:	62 9f       	mul	r22, r18
    2620:	d0 01       	movw	r26, r0
    2622:	73 9f       	mul	r23, r19
    2624:	f0 01       	movw	r30, r0
    2626:	82 9f       	mul	r24, r18
    2628:	e0 0d       	add	r30, r0
    262a:	f1 1d       	adc	r31, r1
    262c:	64 9f       	mul	r22, r20
    262e:	e0 0d       	add	r30, r0
    2630:	f1 1d       	adc	r31, r1
    2632:	92 9f       	mul	r25, r18
    2634:	f0 0d       	add	r31, r0
    2636:	83 9f       	mul	r24, r19
    2638:	f0 0d       	add	r31, r0
    263a:	74 9f       	mul	r23, r20
    263c:	f0 0d       	add	r31, r0
    263e:	65 9f       	mul	r22, r21
    2640:	f0 0d       	add	r31, r0
    2642:	99 27       	eor	r25, r25
    2644:	72 9f       	mul	r23, r18
    2646:	b0 0d       	add	r27, r0
    2648:	e1 1d       	adc	r30, r1
    264a:	f9 1f       	adc	r31, r25
    264c:	63 9f       	mul	r22, r19
    264e:	b0 0d       	add	r27, r0
    2650:	e1 1d       	adc	r30, r1
    2652:	f9 1f       	adc	r31, r25
    2654:	bd 01       	movw	r22, r26
    2656:	cf 01       	movw	r24, r30
    2658:	11 24       	eor	r1, r1
    265a:	08 95       	ret

0000265c <__udivmodsi4>:
    265c:	a1 e2       	ldi	r26, 0x21	; 33
    265e:	1a 2e       	mov	r1, r26
    2660:	aa 1b       	sub	r26, r26
    2662:	bb 1b       	sub	r27, r27
    2664:	fd 01       	movw	r30, r26
    2666:	0d c0       	rjmp	.+26     	; 0x2682 <__udivmodsi4_ep>

00002668 <__udivmodsi4_loop>:
    2668:	aa 1f       	adc	r26, r26
    266a:	bb 1f       	adc	r27, r27
    266c:	ee 1f       	adc	r30, r30
    266e:	ff 1f       	adc	r31, r31
    2670:	a2 17       	cp	r26, r18
    2672:	b3 07       	cpc	r27, r19
    2674:	e4 07       	cpc	r30, r20
    2676:	f5 07       	cpc	r31, r21
    2678:	20 f0       	brcs	.+8      	; 0x2682 <__udivmodsi4_ep>
    267a:	a2 1b       	sub	r26, r18
    267c:	b3 0b       	sbc	r27, r19
    267e:	e4 0b       	sbc	r30, r20
    2680:	f5 0b       	sbc	r31, r21

00002682 <__udivmodsi4_ep>:
    2682:	66 1f       	adc	r22, r22
    2684:	77 1f       	adc	r23, r23
    2686:	88 1f       	adc	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	1a 94       	dec	r1
    268c:	69 f7       	brne	.-38     	; 0x2668 <__udivmodsi4_loop>
    268e:	60 95       	com	r22
    2690:	70 95       	com	r23
    2692:	80 95       	com	r24
    2694:	90 95       	com	r25
    2696:	9b 01       	movw	r18, r22
    2698:	ac 01       	movw	r20, r24
    269a:	bd 01       	movw	r22, r26
    269c:	cf 01       	movw	r24, r30
    269e:	08 95       	ret

000026a0 <__prologue_saves__>:
    26a0:	2f 92       	push	r2
    26a2:	3f 92       	push	r3
    26a4:	4f 92       	push	r4
    26a6:	5f 92       	push	r5
    26a8:	6f 92       	push	r6
    26aa:	7f 92       	push	r7
    26ac:	8f 92       	push	r8
    26ae:	9f 92       	push	r9
    26b0:	af 92       	push	r10
    26b2:	bf 92       	push	r11
    26b4:	cf 92       	push	r12
    26b6:	df 92       	push	r13
    26b8:	ef 92       	push	r14
    26ba:	ff 92       	push	r15
    26bc:	0f 93       	push	r16
    26be:	1f 93       	push	r17
    26c0:	cf 93       	push	r28
    26c2:	df 93       	push	r29
    26c4:	cd b7       	in	r28, 0x3d	; 61
    26c6:	de b7       	in	r29, 0x3e	; 62
    26c8:	ca 1b       	sub	r28, r26
    26ca:	db 0b       	sbc	r29, r27
    26cc:	0f b6       	in	r0, 0x3f	; 63
    26ce:	f8 94       	cli
    26d0:	de bf       	out	0x3e, r29	; 62
    26d2:	0f be       	out	0x3f, r0	; 63
    26d4:	cd bf       	out	0x3d, r28	; 61
    26d6:	09 94       	ijmp

000026d8 <__epilogue_restores__>:
    26d8:	2a 88       	ldd	r2, Y+18	; 0x12
    26da:	39 88       	ldd	r3, Y+17	; 0x11
    26dc:	48 88       	ldd	r4, Y+16	; 0x10
    26de:	5f 84       	ldd	r5, Y+15	; 0x0f
    26e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    26e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    26e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    26e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    26e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    26ea:	b9 84       	ldd	r11, Y+9	; 0x09
    26ec:	c8 84       	ldd	r12, Y+8	; 0x08
    26ee:	df 80       	ldd	r13, Y+7	; 0x07
    26f0:	ee 80       	ldd	r14, Y+6	; 0x06
    26f2:	fd 80       	ldd	r15, Y+5	; 0x05
    26f4:	0c 81       	ldd	r16, Y+4	; 0x04
    26f6:	1b 81       	ldd	r17, Y+3	; 0x03
    26f8:	aa 81       	ldd	r26, Y+2	; 0x02
    26fa:	b9 81       	ldd	r27, Y+1	; 0x01
    26fc:	ce 0f       	add	r28, r30
    26fe:	d1 1d       	adc	r29, r1
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	ed 01       	movw	r28, r26
    270c:	08 95       	ret

0000270e <itoa>:
    270e:	fb 01       	movw	r30, r22
    2710:	9f 01       	movw	r18, r30
    2712:	e8 94       	clt
    2714:	42 30       	cpi	r20, 0x02	; 2
    2716:	c4 f0       	brlt	.+48     	; 0x2748 <itoa+0x3a>
    2718:	45 32       	cpi	r20, 0x25	; 37
    271a:	b4 f4       	brge	.+44     	; 0x2748 <itoa+0x3a>
    271c:	4a 30       	cpi	r20, 0x0A	; 10
    271e:	29 f4       	brne	.+10     	; 0x272a <itoa+0x1c>
    2720:	97 fb       	bst	r25, 7
    2722:	1e f4       	brtc	.+6      	; 0x272a <itoa+0x1c>
    2724:	90 95       	com	r25
    2726:	81 95       	neg	r24
    2728:	9f 4f       	sbci	r25, 0xFF	; 255
    272a:	64 2f       	mov	r22, r20
    272c:	77 27       	eor	r23, r23
    272e:	0e 94 b8 13 	call	0x2770	; 0x2770 <__udivmodhi4>
    2732:	80 5d       	subi	r24, 0xD0	; 208
    2734:	8a 33       	cpi	r24, 0x3A	; 58
    2736:	0c f0       	brlt	.+2      	; 0x273a <itoa+0x2c>
    2738:	89 5d       	subi	r24, 0xD9	; 217
    273a:	81 93       	st	Z+, r24
    273c:	cb 01       	movw	r24, r22
    273e:	00 97       	sbiw	r24, 0x00	; 0
    2740:	a1 f7       	brne	.-24     	; 0x272a <itoa+0x1c>
    2742:	16 f4       	brtc	.+4      	; 0x2748 <itoa+0x3a>
    2744:	5d e2       	ldi	r21, 0x2D	; 45
    2746:	51 93       	st	Z+, r21
    2748:	10 82       	st	Z, r1
    274a:	c9 01       	movw	r24, r18
    274c:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <strrev>

00002750 <strrev>:
    2750:	dc 01       	movw	r26, r24
    2752:	fc 01       	movw	r30, r24
    2754:	67 2f       	mov	r22, r23
    2756:	71 91       	ld	r23, Z+
    2758:	77 23       	and	r23, r23
    275a:	e1 f7       	brne	.-8      	; 0x2754 <strrev+0x4>
    275c:	32 97       	sbiw	r30, 0x02	; 2
    275e:	04 c0       	rjmp	.+8      	; 0x2768 <strrev+0x18>
    2760:	7c 91       	ld	r23, X
    2762:	6d 93       	st	X+, r22
    2764:	70 83       	st	Z, r23
    2766:	62 91       	ld	r22, -Z
    2768:	ae 17       	cp	r26, r30
    276a:	bf 07       	cpc	r27, r31
    276c:	c8 f3       	brcs	.-14     	; 0x2760 <strrev+0x10>
    276e:	08 95       	ret

00002770 <__udivmodhi4>:
    2770:	aa 1b       	sub	r26, r26
    2772:	bb 1b       	sub	r27, r27
    2774:	51 e1       	ldi	r21, 0x11	; 17
    2776:	07 c0       	rjmp	.+14     	; 0x2786 <__udivmodhi4_ep>

00002778 <__udivmodhi4_loop>:
    2778:	aa 1f       	adc	r26, r26
    277a:	bb 1f       	adc	r27, r27
    277c:	a6 17       	cp	r26, r22
    277e:	b7 07       	cpc	r27, r23
    2780:	10 f0       	brcs	.+4      	; 0x2786 <__udivmodhi4_ep>
    2782:	a6 1b       	sub	r26, r22
    2784:	b7 0b       	sbc	r27, r23

00002786 <__udivmodhi4_ep>:
    2786:	88 1f       	adc	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	5a 95       	dec	r21
    278c:	a9 f7       	brne	.-22     	; 0x2778 <__udivmodhi4_loop>
    278e:	80 95       	com	r24
    2790:	90 95       	com	r25
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	08 95       	ret

00002798 <_exit>:
    2798:	f8 94       	cli

0000279a <__stop_program>:
    279a:	ff cf       	rjmp	.-2      	; 0x279a <__stop_program>
